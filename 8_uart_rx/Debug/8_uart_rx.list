
8_uart_rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002c8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000460  08000468  00010468  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000460  08000460  00010468  2**0
                  CONTENTS
  4 .ARM          00000000  08000460  08000460  00010468  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000460  08000468  00010468  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000460  08000460  00010460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000464  08000464  00010464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010468  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000468  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000468  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010468  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000085b  00000000  00000000  00010498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000260  00000000  00000000  00010cf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000090  00000000  00000000  00010f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000068  00000000  00000000  00010fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ec36  00000000  00000000  00011050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000ec1  00000000  00000000  0001fc86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053b92  00000000  00000000  00020b47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000746d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000140  00000000  00000000  0007472c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000448 	.word	0x08000448

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000448 	.word	0x08000448

080001d8 <main>:
#define PIN13_LED_OFF 	(1U<<29)
#define PIN0_INPUT		(1U<<0)


int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
	char key;
	RCC->AHB1ENR |= GPIODEN;
 80001de:	4b1b      	ldr	r3, [pc, #108]	; (800024c <main+0x74>)
 80001e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e2:	4a1a      	ldr	r2, [pc, #104]	; (800024c <main+0x74>)
 80001e4:	f043 0308 	orr.w	r3, r3, #8
 80001e8:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= GPIOAEN;
 80001ea:	4b18      	ldr	r3, [pc, #96]	; (800024c <main+0x74>)
 80001ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001ee:	4a17      	ldr	r2, [pc, #92]	; (800024c <main+0x74>)
 80001f0:	f043 0301 	orr.w	r3, r3, #1
 80001f4:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOD->MODER |= (1U<<26);
 80001f6:	4b16      	ldr	r3, [pc, #88]	; (8000250 <main+0x78>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	4a15      	ldr	r2, [pc, #84]	; (8000250 <main+0x78>)
 80001fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000200:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &=~ (1U<<27);
 8000202:	4b13      	ldr	r3, [pc, #76]	; (8000250 <main+0x78>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a12      	ldr	r2, [pc, #72]	; (8000250 <main+0x78>)
 8000208:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800020c:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~ (1U<<0);
 800020e:	4b11      	ldr	r3, [pc, #68]	; (8000254 <main+0x7c>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4a10      	ldr	r2, [pc, #64]	; (8000254 <main+0x7c>)
 8000214:	f023 0301 	bic.w	r3, r3, #1
 8000218:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~ (1U<<1);
 800021a:	4b0e      	ldr	r3, [pc, #56]	; (8000254 <main+0x7c>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	4a0d      	ldr	r2, [pc, #52]	; (8000254 <main+0x7c>)
 8000220:	f023 0302 	bic.w	r3, r3, #2
 8000224:	6013      	str	r3, [r2, #0]
	uart1_tx_rx_init();
 8000226:	f000 f817 	bl	8000258 <uart1_tx_rx_init>
	while (1)
	{
		key = uart1_read();
 800022a:	f000 f885 	bl	8000338 <uart1_read>
 800022e:	4603      	mov	r3, r0
 8000230:	71fb      	strb	r3, [r7, #7]
		if (key == '1')
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	2b31      	cmp	r3, #49	; 0x31
 8000236:	d104      	bne.n	8000242 <main+0x6a>
		{

			GPIOD->BSRR = PIN13_LED_ON;
 8000238:	4b05      	ldr	r3, [pc, #20]	; (8000250 <main+0x78>)
 800023a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800023e:	619a      	str	r2, [r3, #24]
 8000240:	e7f3      	b.n	800022a <main+0x52>

		}
		else
		{

			GPIOD->BSRR = PIN13_LED_OFF;
 8000242:	4b03      	ldr	r3, [pc, #12]	; (8000250 <main+0x78>)
 8000244:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000248:	619a      	str	r2, [r3, #24]
		key = uart1_read();
 800024a:	e7ee      	b.n	800022a <main+0x52>
 800024c:	40023800 	.word	0x40023800
 8000250:	40020c00 	.word	0x40020c00
 8000254:	40020000 	.word	0x40020000

08000258 <uart1_tx_rx_init>:
{
	uart1_write(ch);
	return ch;
}
void uart1_tx_rx_init(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	/******************Config uart gpio pin**************
	*Enable clock access to gpioa
	*Set PA9 mode to AF mode
	*Set PA9 AF type to UART_TX (AF07)*/

	RCC->AHB1ENR |= GPIOAEN;
 800025c:	4b32      	ldr	r3, [pc, #200]	; (8000328 <uart1_tx_rx_init+0xd0>)
 800025e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000260:	4a31      	ldr	r2, [pc, #196]	; (8000328 <uart1_tx_rx_init+0xd0>)
 8000262:	f043 0301 	orr.w	r3, r3, #1
 8000266:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA ->MODER &=~ (1U<<18);
 8000268:	4b30      	ldr	r3, [pc, #192]	; (800032c <uart1_tx_rx_init+0xd4>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a2f      	ldr	r2, [pc, #188]	; (800032c <uart1_tx_rx_init+0xd4>)
 800026e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000272:	6013      	str	r3, [r2, #0]
	GPIOA ->MODER |= (1U<<19);
 8000274:	4b2d      	ldr	r3, [pc, #180]	; (800032c <uart1_tx_rx_init+0xd4>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a2c      	ldr	r2, [pc, #176]	; (800032c <uart1_tx_rx_init+0xd4>)
 800027a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800027e:	6013      	str	r3, [r2, #0]
	//MODER9->10
	GPIOA ->AFR[1] |= (1U<<4);
 8000280:	4b2a      	ldr	r3, [pc, #168]	; (800032c <uart1_tx_rx_init+0xd4>)
 8000282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000284:	4a29      	ldr	r2, [pc, #164]	; (800032c <uart1_tx_rx_init+0xd4>)
 8000286:	f043 0310 	orr.w	r3, r3, #16
 800028a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA ->AFR[1] |= (1U<<5);
 800028c:	4b27      	ldr	r3, [pc, #156]	; (800032c <uart1_tx_rx_init+0xd4>)
 800028e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000290:	4a26      	ldr	r2, [pc, #152]	; (800032c <uart1_tx_rx_init+0xd4>)
 8000292:	f043 0320 	orr.w	r3, r3, #32
 8000296:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA ->AFR[1] |= (1U<<6);
 8000298:	4b24      	ldr	r3, [pc, #144]	; (800032c <uart1_tx_rx_init+0xd4>)
 800029a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800029c:	4a23      	ldr	r2, [pc, #140]	; (800032c <uart1_tx_rx_init+0xd4>)
 800029e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002a2:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA ->AFR[1] &=~ (1U<<7);
 80002a4:	4b21      	ldr	r3, [pc, #132]	; (800032c <uart1_tx_rx_init+0xd4>)
 80002a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002a8:	4a20      	ldr	r2, [pc, #128]	; (800032c <uart1_tx_rx_init+0xd4>)
 80002aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80002ae:	6253      	str	r3, [r2, #36]	; 0x24
	//AF7



	//Set PA10 AF type to UART_RX
	GPIOA ->MODER &=~ (1U<<20);
 80002b0:	4b1e      	ldr	r3, [pc, #120]	; (800032c <uart1_tx_rx_init+0xd4>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a1d      	ldr	r2, [pc, #116]	; (800032c <uart1_tx_rx_init+0xd4>)
 80002b6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80002ba:	6013      	str	r3, [r2, #0]
	GPIOA ->MODER |= (1U<<21);
 80002bc:	4b1b      	ldr	r3, [pc, #108]	; (800032c <uart1_tx_rx_init+0xd4>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a1a      	ldr	r2, [pc, #104]	; (800032c <uart1_tx_rx_init+0xd4>)
 80002c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80002c6:	6013      	str	r3, [r2, #0]
	//MODER10->10
	GPIOA ->AFR[1] |= (1U<<8);
 80002c8:	4b18      	ldr	r3, [pc, #96]	; (800032c <uart1_tx_rx_init+0xd4>)
 80002ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002cc:	4a17      	ldr	r2, [pc, #92]	; (800032c <uart1_tx_rx_init+0xd4>)
 80002ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002d2:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA ->AFR[1] |= (1U<<9);
 80002d4:	4b15      	ldr	r3, [pc, #84]	; (800032c <uart1_tx_rx_init+0xd4>)
 80002d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002d8:	4a14      	ldr	r2, [pc, #80]	; (800032c <uart1_tx_rx_init+0xd4>)
 80002da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002de:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA ->AFR[1] |= (1U<<10);
 80002e0:	4b12      	ldr	r3, [pc, #72]	; (800032c <uart1_tx_rx_init+0xd4>)
 80002e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002e4:	4a11      	ldr	r2, [pc, #68]	; (800032c <uart1_tx_rx_init+0xd4>)
 80002e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002ea:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA ->AFR[1] &=~ (1U<<11);
 80002ec:	4b0f      	ldr	r3, [pc, #60]	; (800032c <uart1_tx_rx_init+0xd4>)
 80002ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002f0:	4a0e      	ldr	r2, [pc, #56]	; (800032c <uart1_tx_rx_init+0xd4>)
 80002f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80002f6:	6253      	str	r3, [r2, #36]	; 0x24
	//AF7

	RCC->APB2ENR |= UART1EN; //enable uart1
 80002f8:	4b0b      	ldr	r3, [pc, #44]	; (8000328 <uart1_tx_rx_init+0xd0>)
 80002fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002fc:	4a0a      	ldr	r2, [pc, #40]	; (8000328 <uart1_tx_rx_init+0xd0>)
 80002fe:	f043 0310 	orr.w	r3, r3, #16
 8000302:	6453      	str	r3, [r2, #68]	; 0x44
	uart_set_baundrate(USART1, APB2_CLK, UART_BAUDRATE); //config baudrate
 8000304:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000308:	4909      	ldr	r1, [pc, #36]	; (8000330 <uart1_tx_rx_init+0xd8>)
 800030a:	480a      	ldr	r0, [pc, #40]	; (8000334 <uart1_tx_rx_init+0xdc>)
 800030c:	f000 f828 	bl	8000360 <uart_set_baundrate>
	USART1->CR1 = (CR1_TE|CR1_RE); //config transfer/reveive direction
 8000310:	4b08      	ldr	r3, [pc, #32]	; (8000334 <uart1_tx_rx_init+0xdc>)
 8000312:	220c      	movs	r2, #12
 8000314:	60da      	str	r2, [r3, #12]

	USART1->CR1 |= CR1_UE;//Enable USART
 8000316:	4b07      	ldr	r3, [pc, #28]	; (8000334 <uart1_tx_rx_init+0xdc>)
 8000318:	68db      	ldr	r3, [r3, #12]
 800031a:	4a06      	ldr	r2, [pc, #24]	; (8000334 <uart1_tx_rx_init+0xdc>)
 800031c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000320:	60d3      	str	r3, [r2, #12]


}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	40023800 	.word	0x40023800
 800032c:	40020000 	.word	0x40020000
 8000330:	00f42400 	.word	0x00f42400
 8000334:	40011000 	.word	0x40011000

08000338 <uart1_read>:
char uart1_read(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
	//Make sure the receive data is not empty
	while (!(USART1->SR & SR_RNXE));
 800033c:	bf00      	nop
 800033e:	4b07      	ldr	r3, [pc, #28]	; (800035c <uart1_read+0x24>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f003 0320 	and.w	r3, r3, #32
 8000346:	2b00      	cmp	r3, #0
 8000348:	d0f9      	beq.n	800033e <uart1_read+0x6>
	return (USART1->DR);
 800034a:	4b04      	ldr	r3, [pc, #16]	; (800035c <uart1_read+0x24>)
 800034c:	685b      	ldr	r3, [r3, #4]
 800034e:	b2db      	uxtb	r3, r3
}
 8000350:	4618      	mov	r0, r3
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	40011000 	.word	0x40011000

08000360 <uart_set_baundrate>:
	while (!(USART1->SR & SR_TXE)); //STATUS REG
	USART1 -> DR = (ch & 0xFF);  //DR: Data Register, write to transmit data reg

}
static void uart_set_baundrate(USART_TypeDef *UARTx, uint32_t PeriphClk, uint32_t Baudrate)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b084      	sub	sp, #16
 8000364:	af00      	add	r7, sp, #0
 8000366:	60f8      	str	r0, [r7, #12]
 8000368:	60b9      	str	r1, [r7, #8]
 800036a:	607a      	str	r2, [r7, #4]
	UARTx->BRR = compute_uart_div(PeriphClk, Baudrate);
 800036c:	6879      	ldr	r1, [r7, #4]
 800036e:	68b8      	ldr	r0, [r7, #8]
 8000370:	f000 f808 	bl	8000384 <compute_uart_div>
 8000374:	4603      	mov	r3, r0
 8000376:	461a      	mov	r2, r3
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	609a      	str	r2, [r3, #8]
}
 800037c:	bf00      	nop
 800037e:	3710      	adds	r7, #16
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}

08000384 <compute_uart_div>:
static uint16_t compute_uart_div(uint32_t PeriphClk, uint32_t Baudrate)
{
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
 800038c:	6039      	str	r1, [r7, #0]
	return ((PeriphClk +(Baudrate/2U))/Baudrate);
 800038e:	683b      	ldr	r3, [r7, #0]
 8000390:	085a      	lsrs	r2, r3, #1
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	441a      	add	r2, r3
 8000396:	683b      	ldr	r3, [r7, #0]
 8000398:	fbb2 f3f3 	udiv	r3, r2, r3
 800039c:	b29b      	uxth	r3, r3
}
 800039e:	4618      	mov	r0, r3
 80003a0:	370c      	adds	r7, #12
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
	...

080003ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003ac:	480d      	ldr	r0, [pc, #52]	; (80003e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003b4:	480c      	ldr	r0, [pc, #48]	; (80003e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80003b6:	490d      	ldr	r1, [pc, #52]	; (80003ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80003b8:	4a0d      	ldr	r2, [pc, #52]	; (80003f0 <LoopForever+0xe>)
  movs r3, #0
 80003ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003bc:	e002      	b.n	80003c4 <LoopCopyDataInit>

080003be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003c2:	3304      	adds	r3, #4

080003c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003c8:	d3f9      	bcc.n	80003be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ca:	4a0a      	ldr	r2, [pc, #40]	; (80003f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003cc:	4c0a      	ldr	r4, [pc, #40]	; (80003f8 <LoopForever+0x16>)
  movs r3, #0
 80003ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003d0:	e001      	b.n	80003d6 <LoopFillZerobss>

080003d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003d4:	3204      	adds	r2, #4

080003d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003d8:	d3fb      	bcc.n	80003d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003da:	f000 f811 	bl	8000400 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003de:	f7ff fefb 	bl	80001d8 <main>

080003e2 <LoopForever>:

LoopForever:
  b LoopForever
 80003e2:	e7fe      	b.n	80003e2 <LoopForever>
  ldr   r0, =_estack
 80003e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003ec:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003f0:	08000468 	.word	0x08000468
  ldr r2, =_sbss
 80003f4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003f8:	2000001c 	.word	0x2000001c

080003fc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003fc:	e7fe      	b.n	80003fc <ADC_IRQHandler>
	...

08000400 <__libc_init_array>:
 8000400:	b570      	push	{r4, r5, r6, lr}
 8000402:	4d0d      	ldr	r5, [pc, #52]	; (8000438 <__libc_init_array+0x38>)
 8000404:	4c0d      	ldr	r4, [pc, #52]	; (800043c <__libc_init_array+0x3c>)
 8000406:	1b64      	subs	r4, r4, r5
 8000408:	10a4      	asrs	r4, r4, #2
 800040a:	2600      	movs	r6, #0
 800040c:	42a6      	cmp	r6, r4
 800040e:	d109      	bne.n	8000424 <__libc_init_array+0x24>
 8000410:	4d0b      	ldr	r5, [pc, #44]	; (8000440 <__libc_init_array+0x40>)
 8000412:	4c0c      	ldr	r4, [pc, #48]	; (8000444 <__libc_init_array+0x44>)
 8000414:	f000 f818 	bl	8000448 <_init>
 8000418:	1b64      	subs	r4, r4, r5
 800041a:	10a4      	asrs	r4, r4, #2
 800041c:	2600      	movs	r6, #0
 800041e:	42a6      	cmp	r6, r4
 8000420:	d105      	bne.n	800042e <__libc_init_array+0x2e>
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f855 3b04 	ldr.w	r3, [r5], #4
 8000428:	4798      	blx	r3
 800042a:	3601      	adds	r6, #1
 800042c:	e7ee      	b.n	800040c <__libc_init_array+0xc>
 800042e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000432:	4798      	blx	r3
 8000434:	3601      	adds	r6, #1
 8000436:	e7f2      	b.n	800041e <__libc_init_array+0x1e>
 8000438:	08000460 	.word	0x08000460
 800043c:	08000460 	.word	0x08000460
 8000440:	08000460 	.word	0x08000460
 8000444:	08000464 	.word	0x08000464

08000448 <_init>:
 8000448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800044a:	bf00      	nop
 800044c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800044e:	bc08      	pop	{r3}
 8000450:	469e      	mov	lr, r3
 8000452:	4770      	bx	lr

08000454 <_fini>:
 8000454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000456:	bf00      	nop
 8000458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800045a:	bc08      	pop	{r3}
 800045c:	469e      	mov	lr, r3
 800045e:	4770      	bx	lr
