
7_uart_moduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000db0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08000f48  08000f48  00010f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000fb8  08000fb8  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08000fb8  08000fb8  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fb8  08000fb8  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fb8  08000fb8  00010fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000fbc  08000fbc  00010fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08000fc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000064  08001024  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08001024  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000dd3  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000043e  00000000  00000000  00020e67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000150  00000000  00000000  000212a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000108  00000000  00000000  000213f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fb42  00000000  00000000  00021500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001b65  00000000  00000000  00031042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000552d0  00000000  00000000  00032ba7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00087e77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ab8  00000000  00000000  00087ec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000064 	.word	0x20000064
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000f30 	.word	0x08000f30

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000068 	.word	0x20000068
 80001d4:	08000f30 	.word	0x08000f30

080001d8 <main>:
#include "uart.h"



int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0

	uart1_tx_init();
 80001de:	f000 f8c3 	bl	8000368 <uart1_tx_init>
	while (1)
	{

		printf("Hello!...\r\n");
 80001e2:	4807      	ldr	r0, [pc, #28]	; (8000200 <main+0x28>)
 80001e4:	f000 fa14 	bl	8000610 <puts>
		for (int i=0; i<100000; i++);
 80001e8:	2300      	movs	r3, #0
 80001ea:	607b      	str	r3, [r7, #4]
 80001ec:	e002      	b.n	80001f4 <main+0x1c>
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	3301      	adds	r3, #1
 80001f2:	607b      	str	r3, [r7, #4]
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	4a03      	ldr	r2, [pc, #12]	; (8000204 <main+0x2c>)
 80001f8:	4293      	cmp	r3, r2
 80001fa:	ddf8      	ble.n	80001ee <main+0x16>
		printf("Hello!...\r\n");
 80001fc:	e7f1      	b.n	80001e2 <main+0xa>
 80001fe:	bf00      	nop
 8000200:	08000f48 	.word	0x08000f48
 8000204:	0001869f 	.word	0x0001869f

08000208 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b086      	sub	sp, #24
 800020c:	af00      	add	r7, sp, #0
 800020e:	60f8      	str	r0, [r7, #12]
 8000210:	60b9      	str	r1, [r7, #8]
 8000212:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000214:	2300      	movs	r3, #0
 8000216:	617b      	str	r3, [r7, #20]
 8000218:	e00a      	b.n	8000230 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800021a:	f3af 8000 	nop.w
 800021e:	4601      	mov	r1, r0
 8000220:	68bb      	ldr	r3, [r7, #8]
 8000222:	1c5a      	adds	r2, r3, #1
 8000224:	60ba      	str	r2, [r7, #8]
 8000226:	b2ca      	uxtb	r2, r1
 8000228:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800022a:	697b      	ldr	r3, [r7, #20]
 800022c:	3301      	adds	r3, #1
 800022e:	617b      	str	r3, [r7, #20]
 8000230:	697a      	ldr	r2, [r7, #20]
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	429a      	cmp	r2, r3
 8000236:	dbf0      	blt.n	800021a <_read+0x12>
  }

  return len;
 8000238:	687b      	ldr	r3, [r7, #4]
}
 800023a:	4618      	mov	r0, r3
 800023c:	3718      	adds	r7, #24
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}

08000242 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000242:	b580      	push	{r7, lr}
 8000244:	b086      	sub	sp, #24
 8000246:	af00      	add	r7, sp, #0
 8000248:	60f8      	str	r0, [r7, #12]
 800024a:	60b9      	str	r1, [r7, #8]
 800024c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800024e:	2300      	movs	r3, #0
 8000250:	617b      	str	r3, [r7, #20]
 8000252:	e009      	b.n	8000268 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000254:	68bb      	ldr	r3, [r7, #8]
 8000256:	1c5a      	adds	r2, r3, #1
 8000258:	60ba      	str	r2, [r7, #8]
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	4618      	mov	r0, r3
 800025e:	f000 f877 	bl	8000350 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000262:	697b      	ldr	r3, [r7, #20]
 8000264:	3301      	adds	r3, #1
 8000266:	617b      	str	r3, [r7, #20]
 8000268:	697a      	ldr	r2, [r7, #20]
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	429a      	cmp	r2, r3
 800026e:	dbf1      	blt.n	8000254 <_write+0x12>
  }
  return len;
 8000270:	687b      	ldr	r3, [r7, #4]
}
 8000272:	4618      	mov	r0, r3
 8000274:	3718      	adds	r7, #24
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}

0800027a <_close>:

int _close(int file)
{
 800027a:	b480      	push	{r7}
 800027c:	b083      	sub	sp, #12
 800027e:	af00      	add	r7, sp, #0
 8000280:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000282:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000286:	4618      	mov	r0, r3
 8000288:	370c      	adds	r7, #12
 800028a:	46bd      	mov	sp, r7
 800028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000290:	4770      	bx	lr

08000292 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000292:	b480      	push	{r7}
 8000294:	b083      	sub	sp, #12
 8000296:	af00      	add	r7, sp, #0
 8000298:	6078      	str	r0, [r7, #4]
 800029a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800029c:	683b      	ldr	r3, [r7, #0]
 800029e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80002a2:	605a      	str	r2, [r3, #4]
  return 0;
 80002a4:	2300      	movs	r3, #0
}
 80002a6:	4618      	mov	r0, r3
 80002a8:	370c      	adds	r7, #12
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr

080002b2 <_isatty>:

int _isatty(int file)
{
 80002b2:	b480      	push	{r7}
 80002b4:	b083      	sub	sp, #12
 80002b6:	af00      	add	r7, sp, #0
 80002b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80002ba:	2301      	movs	r3, #1
}
 80002bc:	4618      	mov	r0, r3
 80002be:	370c      	adds	r7, #12
 80002c0:	46bd      	mov	sp, r7
 80002c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c6:	4770      	bx	lr

080002c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b085      	sub	sp, #20
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	60f8      	str	r0, [r7, #12]
 80002d0:	60b9      	str	r1, [r7, #8]
 80002d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80002d4:	2300      	movs	r3, #0
}
 80002d6:	4618      	mov	r0, r3
 80002d8:	3714      	adds	r7, #20
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr
	...

080002e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b086      	sub	sp, #24
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80002ec:	4a14      	ldr	r2, [pc, #80]	; (8000340 <_sbrk+0x5c>)
 80002ee:	4b15      	ldr	r3, [pc, #84]	; (8000344 <_sbrk+0x60>)
 80002f0:	1ad3      	subs	r3, r2, r3
 80002f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80002f4:	697b      	ldr	r3, [r7, #20]
 80002f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80002f8:	4b13      	ldr	r3, [pc, #76]	; (8000348 <_sbrk+0x64>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d102      	bne.n	8000306 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000300:	4b11      	ldr	r3, [pc, #68]	; (8000348 <_sbrk+0x64>)
 8000302:	4a12      	ldr	r2, [pc, #72]	; (800034c <_sbrk+0x68>)
 8000304:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000306:	4b10      	ldr	r3, [pc, #64]	; (8000348 <_sbrk+0x64>)
 8000308:	681a      	ldr	r2, [r3, #0]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	4413      	add	r3, r2
 800030e:	693a      	ldr	r2, [r7, #16]
 8000310:	429a      	cmp	r2, r3
 8000312:	d207      	bcs.n	8000324 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000314:	f000 f8dc 	bl	80004d0 <__errno>
 8000318:	4603      	mov	r3, r0
 800031a:	220c      	movs	r2, #12
 800031c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800031e:	f04f 33ff 	mov.w	r3, #4294967295
 8000322:	e009      	b.n	8000338 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000324:	4b08      	ldr	r3, [pc, #32]	; (8000348 <_sbrk+0x64>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800032a:	4b07      	ldr	r3, [pc, #28]	; (8000348 <_sbrk+0x64>)
 800032c:	681a      	ldr	r2, [r3, #0]
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4413      	add	r3, r2
 8000332:	4a05      	ldr	r2, [pc, #20]	; (8000348 <_sbrk+0x64>)
 8000334:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000336:	68fb      	ldr	r3, [r7, #12]
}
 8000338:	4618      	mov	r0, r3
 800033a:	3718      	adds	r7, #24
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}
 8000340:	20020000 	.word	0x20020000
 8000344:	00000400 	.word	0x00000400
 8000348:	20000080 	.word	0x20000080
 800034c:	20000098 	.word	0x20000098

08000350 <__io_putchar>:
void uart1_tx_init(void);
void uart1_write(int ch);
static void uart_set_baundrate(USART_TypeDef *UARTx, uint32_t PeriphClk, uint32_t Baundrate);
static uint16_t compute_uart_div(uint32_t PeriphClk, uint32_t Baundrate);
int __io_putchar(int ch)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
	uart1_write(ch);
 8000358:	6878      	ldr	r0, [r7, #4]
 800035a:	f000 f851 	bl	8000400 <uart1_write>
	return ch;
 800035e:	687b      	ldr	r3, [r7, #4]
}
 8000360:	4618      	mov	r0, r3
 8000362:	3708      	adds	r7, #8
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}

08000368 <uart1_tx_init>:
void uart1_tx_init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
	/******************Config uart gpio pin**************
	*Enable clock access to gpioa
	*Set PA9 mode to AF mode
	*Set PA9 AF type to UART_TX (AF07)*/

	RCC->AHB1ENR |= GPIOAEN;
 800036c:	4b20      	ldr	r3, [pc, #128]	; (80003f0 <uart1_tx_init+0x88>)
 800036e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000370:	4a1f      	ldr	r2, [pc, #124]	; (80003f0 <uart1_tx_init+0x88>)
 8000372:	f043 0301 	orr.w	r3, r3, #1
 8000376:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA ->MODER &=~ (1U<<18);
 8000378:	4b1e      	ldr	r3, [pc, #120]	; (80003f4 <uart1_tx_init+0x8c>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a1d      	ldr	r2, [pc, #116]	; (80003f4 <uart1_tx_init+0x8c>)
 800037e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000382:	6013      	str	r3, [r2, #0]
	GPIOA ->MODER |= (1U<<19);
 8000384:	4b1b      	ldr	r3, [pc, #108]	; (80003f4 <uart1_tx_init+0x8c>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a1a      	ldr	r2, [pc, #104]	; (80003f4 <uart1_tx_init+0x8c>)
 800038a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800038e:	6013      	str	r3, [r2, #0]
	//MODER9->10
	GPIOA ->AFR[1] |= (1U<<4);
 8000390:	4b18      	ldr	r3, [pc, #96]	; (80003f4 <uart1_tx_init+0x8c>)
 8000392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000394:	4a17      	ldr	r2, [pc, #92]	; (80003f4 <uart1_tx_init+0x8c>)
 8000396:	f043 0310 	orr.w	r3, r3, #16
 800039a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA ->AFR[1] |= (1U<<5);
 800039c:	4b15      	ldr	r3, [pc, #84]	; (80003f4 <uart1_tx_init+0x8c>)
 800039e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a0:	4a14      	ldr	r2, [pc, #80]	; (80003f4 <uart1_tx_init+0x8c>)
 80003a2:	f043 0320 	orr.w	r3, r3, #32
 80003a6:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA ->AFR[1] |= (1U<<6);
 80003a8:	4b12      	ldr	r3, [pc, #72]	; (80003f4 <uart1_tx_init+0x8c>)
 80003aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003ac:	4a11      	ldr	r2, [pc, #68]	; (80003f4 <uart1_tx_init+0x8c>)
 80003ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003b2:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA ->AFR[1] &=~ (1U<<7);
 80003b4:	4b0f      	ldr	r3, [pc, #60]	; (80003f4 <uart1_tx_init+0x8c>)
 80003b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003b8:	4a0e      	ldr	r2, [pc, #56]	; (80003f4 <uart1_tx_init+0x8c>)
 80003ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80003be:	6253      	str	r3, [r2, #36]	; 0x24
	//AF7
	RCC->APB2ENR |= UART1EN; //enable uart1
 80003c0:	4b0b      	ldr	r3, [pc, #44]	; (80003f0 <uart1_tx_init+0x88>)
 80003c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003c4:	4a0a      	ldr	r2, [pc, #40]	; (80003f0 <uart1_tx_init+0x88>)
 80003c6:	f043 0310 	orr.w	r3, r3, #16
 80003ca:	6453      	str	r3, [r2, #68]	; 0x44
	uart_set_baundrate(USART1, APB2_CLK, UART_BAUDRATE); //config baudrate
 80003cc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80003d0:	4909      	ldr	r1, [pc, #36]	; (80003f8 <uart1_tx_init+0x90>)
 80003d2:	480a      	ldr	r0, [pc, #40]	; (80003fc <uart1_tx_init+0x94>)
 80003d4:	f000 f82c 	bl	8000430 <uart_set_baundrate>
	USART1->CR1 = CR1_TE; //config transfer direction
 80003d8:	4b08      	ldr	r3, [pc, #32]	; (80003fc <uart1_tx_init+0x94>)
 80003da:	2208      	movs	r2, #8
 80003dc:	60da      	str	r2, [r3, #12]
	USART1->CR1 |= CR1_UE;//Enable USART
 80003de:	4b07      	ldr	r3, [pc, #28]	; (80003fc <uart1_tx_init+0x94>)
 80003e0:	68db      	ldr	r3, [r3, #12]
 80003e2:	4a06      	ldr	r2, [pc, #24]	; (80003fc <uart1_tx_init+0x94>)
 80003e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003e8:	60d3      	str	r3, [r2, #12]


}
 80003ea:	bf00      	nop
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	40023800 	.word	0x40023800
 80003f4:	40020000 	.word	0x40020000
 80003f8:	00f42400 	.word	0x00f42400
 80003fc:	40011000 	.word	0x40011000

08000400 <uart1_write>:
void uart1_write(int ch)
{
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
	while (!(USART1->SR & SR_TXE));
 8000408:	bf00      	nop
 800040a:	4b08      	ldr	r3, [pc, #32]	; (800042c <uart1_write+0x2c>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000412:	2b00      	cmp	r3, #0
 8000414:	d0f9      	beq.n	800040a <uart1_write+0xa>
	USART1 -> DR = (ch & 0xFF);  //DR: Data Register, write to transmit data reg
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4a04      	ldr	r2, [pc, #16]	; (800042c <uart1_write+0x2c>)
 800041a:	b2db      	uxtb	r3, r3
 800041c:	6053      	str	r3, [r2, #4]

}
 800041e:	bf00      	nop
 8000420:	370c      	adds	r7, #12
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	40011000 	.word	0x40011000

08000430 <uart_set_baundrate>:
static void uart_set_baundrate(USART_TypeDef *UARTx, uint32_t PeriphClk, uint32_t Baudrate)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b084      	sub	sp, #16
 8000434:	af00      	add	r7, sp, #0
 8000436:	60f8      	str	r0, [r7, #12]
 8000438:	60b9      	str	r1, [r7, #8]
 800043a:	607a      	str	r2, [r7, #4]
	UARTx->BRR = compute_uart_div(PeriphClk, Baudrate);
 800043c:	6879      	ldr	r1, [r7, #4]
 800043e:	68b8      	ldr	r0, [r7, #8]
 8000440:	f000 f808 	bl	8000454 <compute_uart_div>
 8000444:	4603      	mov	r3, r0
 8000446:	461a      	mov	r2, r3
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	609a      	str	r2, [r3, #8]
}
 800044c:	bf00      	nop
 800044e:	3710      	adds	r7, #16
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}

08000454 <compute_uart_div>:
static uint16_t compute_uart_div(uint32_t PeriphClk, uint32_t Baudrate)
{
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	6039      	str	r1, [r7, #0]
	return ((PeriphClk +(Baudrate/2U))/Baudrate);
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	085a      	lsrs	r2, r3, #1
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	441a      	add	r2, r3
 8000466:	683b      	ldr	r3, [r7, #0]
 8000468:	fbb2 f3f3 	udiv	r3, r2, r3
 800046c:	b29b      	uxth	r3, r3
}
 800046e:	4618      	mov	r0, r3
 8000470:	370c      	adds	r7, #12
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr
	...

0800047c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800047c:	480d      	ldr	r0, [pc, #52]	; (80004b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800047e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000480:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000484:	480c      	ldr	r0, [pc, #48]	; (80004b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000486:	490d      	ldr	r1, [pc, #52]	; (80004bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000488:	4a0d      	ldr	r2, [pc, #52]	; (80004c0 <LoopForever+0xe>)
  movs r3, #0
 800048a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800048c:	e002      	b.n	8000494 <LoopCopyDataInit>

0800048e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800048e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000490:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000492:	3304      	adds	r3, #4

08000494 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000494:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000496:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000498:	d3f9      	bcc.n	800048e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800049a:	4a0a      	ldr	r2, [pc, #40]	; (80004c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800049c:	4c0a      	ldr	r4, [pc, #40]	; (80004c8 <LoopForever+0x16>)
  movs r3, #0
 800049e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004a0:	e001      	b.n	80004a6 <LoopFillZerobss>

080004a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004a4:	3204      	adds	r2, #4

080004a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004a8:	d3fb      	bcc.n	80004a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004aa:	f000 f817 	bl	80004dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ae:	f7ff fe93 	bl	80001d8 <main>

080004b2 <LoopForever>:

LoopForever:
  b LoopForever
 80004b2:	e7fe      	b.n	80004b2 <LoopForever>
  ldr   r0, =_estack
 80004b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004bc:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80004c0:	08000fc0 	.word	0x08000fc0
  ldr r2, =_sbss
 80004c4:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80004c8:	20000094 	.word	0x20000094

080004cc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004cc:	e7fe      	b.n	80004cc <ADC_IRQHandler>
	...

080004d0 <__errno>:
 80004d0:	4b01      	ldr	r3, [pc, #4]	; (80004d8 <__errno+0x8>)
 80004d2:	6818      	ldr	r0, [r3, #0]
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	20000000 	.word	0x20000000

080004dc <__libc_init_array>:
 80004dc:	b570      	push	{r4, r5, r6, lr}
 80004de:	4d0d      	ldr	r5, [pc, #52]	; (8000514 <__libc_init_array+0x38>)
 80004e0:	4c0d      	ldr	r4, [pc, #52]	; (8000518 <__libc_init_array+0x3c>)
 80004e2:	1b64      	subs	r4, r4, r5
 80004e4:	10a4      	asrs	r4, r4, #2
 80004e6:	2600      	movs	r6, #0
 80004e8:	42a6      	cmp	r6, r4
 80004ea:	d109      	bne.n	8000500 <__libc_init_array+0x24>
 80004ec:	4d0b      	ldr	r5, [pc, #44]	; (800051c <__libc_init_array+0x40>)
 80004ee:	4c0c      	ldr	r4, [pc, #48]	; (8000520 <__libc_init_array+0x44>)
 80004f0:	f000 fd1e 	bl	8000f30 <_init>
 80004f4:	1b64      	subs	r4, r4, r5
 80004f6:	10a4      	asrs	r4, r4, #2
 80004f8:	2600      	movs	r6, #0
 80004fa:	42a6      	cmp	r6, r4
 80004fc:	d105      	bne.n	800050a <__libc_init_array+0x2e>
 80004fe:	bd70      	pop	{r4, r5, r6, pc}
 8000500:	f855 3b04 	ldr.w	r3, [r5], #4
 8000504:	4798      	blx	r3
 8000506:	3601      	adds	r6, #1
 8000508:	e7ee      	b.n	80004e8 <__libc_init_array+0xc>
 800050a:	f855 3b04 	ldr.w	r3, [r5], #4
 800050e:	4798      	blx	r3
 8000510:	3601      	adds	r6, #1
 8000512:	e7f2      	b.n	80004fa <__libc_init_array+0x1e>
 8000514:	08000fb8 	.word	0x08000fb8
 8000518:	08000fb8 	.word	0x08000fb8
 800051c:	08000fb8 	.word	0x08000fb8
 8000520:	08000fbc 	.word	0x08000fbc

08000524 <memset>:
 8000524:	4402      	add	r2, r0
 8000526:	4603      	mov	r3, r0
 8000528:	4293      	cmp	r3, r2
 800052a:	d100      	bne.n	800052e <memset+0xa>
 800052c:	4770      	bx	lr
 800052e:	f803 1b01 	strb.w	r1, [r3], #1
 8000532:	e7f9      	b.n	8000528 <memset+0x4>

08000534 <_puts_r>:
 8000534:	b570      	push	{r4, r5, r6, lr}
 8000536:	460e      	mov	r6, r1
 8000538:	4605      	mov	r5, r0
 800053a:	b118      	cbz	r0, 8000544 <_puts_r+0x10>
 800053c:	6983      	ldr	r3, [r0, #24]
 800053e:	b90b      	cbnz	r3, 8000544 <_puts_r+0x10>
 8000540:	f000 fa48 	bl	80009d4 <__sinit>
 8000544:	69ab      	ldr	r3, [r5, #24]
 8000546:	68ac      	ldr	r4, [r5, #8]
 8000548:	b913      	cbnz	r3, 8000550 <_puts_r+0x1c>
 800054a:	4628      	mov	r0, r5
 800054c:	f000 fa42 	bl	80009d4 <__sinit>
 8000550:	4b2c      	ldr	r3, [pc, #176]	; (8000604 <_puts_r+0xd0>)
 8000552:	429c      	cmp	r4, r3
 8000554:	d120      	bne.n	8000598 <_puts_r+0x64>
 8000556:	686c      	ldr	r4, [r5, #4]
 8000558:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800055a:	07db      	lsls	r3, r3, #31
 800055c:	d405      	bmi.n	800056a <_puts_r+0x36>
 800055e:	89a3      	ldrh	r3, [r4, #12]
 8000560:	0598      	lsls	r0, r3, #22
 8000562:	d402      	bmi.n	800056a <_puts_r+0x36>
 8000564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000566:	f000 fad3 	bl	8000b10 <__retarget_lock_acquire_recursive>
 800056a:	89a3      	ldrh	r3, [r4, #12]
 800056c:	0719      	lsls	r1, r3, #28
 800056e:	d51d      	bpl.n	80005ac <_puts_r+0x78>
 8000570:	6923      	ldr	r3, [r4, #16]
 8000572:	b1db      	cbz	r3, 80005ac <_puts_r+0x78>
 8000574:	3e01      	subs	r6, #1
 8000576:	68a3      	ldr	r3, [r4, #8]
 8000578:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800057c:	3b01      	subs	r3, #1
 800057e:	60a3      	str	r3, [r4, #8]
 8000580:	bb39      	cbnz	r1, 80005d2 <_puts_r+0x9e>
 8000582:	2b00      	cmp	r3, #0
 8000584:	da38      	bge.n	80005f8 <_puts_r+0xc4>
 8000586:	4622      	mov	r2, r4
 8000588:	210a      	movs	r1, #10
 800058a:	4628      	mov	r0, r5
 800058c:	f000 f848 	bl	8000620 <__swbuf_r>
 8000590:	3001      	adds	r0, #1
 8000592:	d011      	beq.n	80005b8 <_puts_r+0x84>
 8000594:	250a      	movs	r5, #10
 8000596:	e011      	b.n	80005bc <_puts_r+0x88>
 8000598:	4b1b      	ldr	r3, [pc, #108]	; (8000608 <_puts_r+0xd4>)
 800059a:	429c      	cmp	r4, r3
 800059c:	d101      	bne.n	80005a2 <_puts_r+0x6e>
 800059e:	68ac      	ldr	r4, [r5, #8]
 80005a0:	e7da      	b.n	8000558 <_puts_r+0x24>
 80005a2:	4b1a      	ldr	r3, [pc, #104]	; (800060c <_puts_r+0xd8>)
 80005a4:	429c      	cmp	r4, r3
 80005a6:	bf08      	it	eq
 80005a8:	68ec      	ldreq	r4, [r5, #12]
 80005aa:	e7d5      	b.n	8000558 <_puts_r+0x24>
 80005ac:	4621      	mov	r1, r4
 80005ae:	4628      	mov	r0, r5
 80005b0:	f000 f888 	bl	80006c4 <__swsetup_r>
 80005b4:	2800      	cmp	r0, #0
 80005b6:	d0dd      	beq.n	8000574 <_puts_r+0x40>
 80005b8:	f04f 35ff 	mov.w	r5, #4294967295
 80005bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80005be:	07da      	lsls	r2, r3, #31
 80005c0:	d405      	bmi.n	80005ce <_puts_r+0x9a>
 80005c2:	89a3      	ldrh	r3, [r4, #12]
 80005c4:	059b      	lsls	r3, r3, #22
 80005c6:	d402      	bmi.n	80005ce <_puts_r+0x9a>
 80005c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80005ca:	f000 faa2 	bl	8000b12 <__retarget_lock_release_recursive>
 80005ce:	4628      	mov	r0, r5
 80005d0:	bd70      	pop	{r4, r5, r6, pc}
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	da04      	bge.n	80005e0 <_puts_r+0xac>
 80005d6:	69a2      	ldr	r2, [r4, #24]
 80005d8:	429a      	cmp	r2, r3
 80005da:	dc06      	bgt.n	80005ea <_puts_r+0xb6>
 80005dc:	290a      	cmp	r1, #10
 80005de:	d004      	beq.n	80005ea <_puts_r+0xb6>
 80005e0:	6823      	ldr	r3, [r4, #0]
 80005e2:	1c5a      	adds	r2, r3, #1
 80005e4:	6022      	str	r2, [r4, #0]
 80005e6:	7019      	strb	r1, [r3, #0]
 80005e8:	e7c5      	b.n	8000576 <_puts_r+0x42>
 80005ea:	4622      	mov	r2, r4
 80005ec:	4628      	mov	r0, r5
 80005ee:	f000 f817 	bl	8000620 <__swbuf_r>
 80005f2:	3001      	adds	r0, #1
 80005f4:	d1bf      	bne.n	8000576 <_puts_r+0x42>
 80005f6:	e7df      	b.n	80005b8 <_puts_r+0x84>
 80005f8:	6823      	ldr	r3, [r4, #0]
 80005fa:	250a      	movs	r5, #10
 80005fc:	1c5a      	adds	r2, r3, #1
 80005fe:	6022      	str	r2, [r4, #0]
 8000600:	701d      	strb	r5, [r3, #0]
 8000602:	e7db      	b.n	80005bc <_puts_r+0x88>
 8000604:	08000f78 	.word	0x08000f78
 8000608:	08000f98 	.word	0x08000f98
 800060c:	08000f58 	.word	0x08000f58

08000610 <puts>:
 8000610:	4b02      	ldr	r3, [pc, #8]	; (800061c <puts+0xc>)
 8000612:	4601      	mov	r1, r0
 8000614:	6818      	ldr	r0, [r3, #0]
 8000616:	f7ff bf8d 	b.w	8000534 <_puts_r>
 800061a:	bf00      	nop
 800061c:	20000000 	.word	0x20000000

08000620 <__swbuf_r>:
 8000620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000622:	460e      	mov	r6, r1
 8000624:	4614      	mov	r4, r2
 8000626:	4605      	mov	r5, r0
 8000628:	b118      	cbz	r0, 8000632 <__swbuf_r+0x12>
 800062a:	6983      	ldr	r3, [r0, #24]
 800062c:	b90b      	cbnz	r3, 8000632 <__swbuf_r+0x12>
 800062e:	f000 f9d1 	bl	80009d4 <__sinit>
 8000632:	4b21      	ldr	r3, [pc, #132]	; (80006b8 <__swbuf_r+0x98>)
 8000634:	429c      	cmp	r4, r3
 8000636:	d12b      	bne.n	8000690 <__swbuf_r+0x70>
 8000638:	686c      	ldr	r4, [r5, #4]
 800063a:	69a3      	ldr	r3, [r4, #24]
 800063c:	60a3      	str	r3, [r4, #8]
 800063e:	89a3      	ldrh	r3, [r4, #12]
 8000640:	071a      	lsls	r2, r3, #28
 8000642:	d52f      	bpl.n	80006a4 <__swbuf_r+0x84>
 8000644:	6923      	ldr	r3, [r4, #16]
 8000646:	b36b      	cbz	r3, 80006a4 <__swbuf_r+0x84>
 8000648:	6923      	ldr	r3, [r4, #16]
 800064a:	6820      	ldr	r0, [r4, #0]
 800064c:	1ac0      	subs	r0, r0, r3
 800064e:	6963      	ldr	r3, [r4, #20]
 8000650:	b2f6      	uxtb	r6, r6
 8000652:	4283      	cmp	r3, r0
 8000654:	4637      	mov	r7, r6
 8000656:	dc04      	bgt.n	8000662 <__swbuf_r+0x42>
 8000658:	4621      	mov	r1, r4
 800065a:	4628      	mov	r0, r5
 800065c:	f000 f926 	bl	80008ac <_fflush_r>
 8000660:	bb30      	cbnz	r0, 80006b0 <__swbuf_r+0x90>
 8000662:	68a3      	ldr	r3, [r4, #8]
 8000664:	3b01      	subs	r3, #1
 8000666:	60a3      	str	r3, [r4, #8]
 8000668:	6823      	ldr	r3, [r4, #0]
 800066a:	1c5a      	adds	r2, r3, #1
 800066c:	6022      	str	r2, [r4, #0]
 800066e:	701e      	strb	r6, [r3, #0]
 8000670:	6963      	ldr	r3, [r4, #20]
 8000672:	3001      	adds	r0, #1
 8000674:	4283      	cmp	r3, r0
 8000676:	d004      	beq.n	8000682 <__swbuf_r+0x62>
 8000678:	89a3      	ldrh	r3, [r4, #12]
 800067a:	07db      	lsls	r3, r3, #31
 800067c:	d506      	bpl.n	800068c <__swbuf_r+0x6c>
 800067e:	2e0a      	cmp	r6, #10
 8000680:	d104      	bne.n	800068c <__swbuf_r+0x6c>
 8000682:	4621      	mov	r1, r4
 8000684:	4628      	mov	r0, r5
 8000686:	f000 f911 	bl	80008ac <_fflush_r>
 800068a:	b988      	cbnz	r0, 80006b0 <__swbuf_r+0x90>
 800068c:	4638      	mov	r0, r7
 800068e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000690:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <__swbuf_r+0x9c>)
 8000692:	429c      	cmp	r4, r3
 8000694:	d101      	bne.n	800069a <__swbuf_r+0x7a>
 8000696:	68ac      	ldr	r4, [r5, #8]
 8000698:	e7cf      	b.n	800063a <__swbuf_r+0x1a>
 800069a:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <__swbuf_r+0xa0>)
 800069c:	429c      	cmp	r4, r3
 800069e:	bf08      	it	eq
 80006a0:	68ec      	ldreq	r4, [r5, #12]
 80006a2:	e7ca      	b.n	800063a <__swbuf_r+0x1a>
 80006a4:	4621      	mov	r1, r4
 80006a6:	4628      	mov	r0, r5
 80006a8:	f000 f80c 	bl	80006c4 <__swsetup_r>
 80006ac:	2800      	cmp	r0, #0
 80006ae:	d0cb      	beq.n	8000648 <__swbuf_r+0x28>
 80006b0:	f04f 37ff 	mov.w	r7, #4294967295
 80006b4:	e7ea      	b.n	800068c <__swbuf_r+0x6c>
 80006b6:	bf00      	nop
 80006b8:	08000f78 	.word	0x08000f78
 80006bc:	08000f98 	.word	0x08000f98
 80006c0:	08000f58 	.word	0x08000f58

080006c4 <__swsetup_r>:
 80006c4:	4b32      	ldr	r3, [pc, #200]	; (8000790 <__swsetup_r+0xcc>)
 80006c6:	b570      	push	{r4, r5, r6, lr}
 80006c8:	681d      	ldr	r5, [r3, #0]
 80006ca:	4606      	mov	r6, r0
 80006cc:	460c      	mov	r4, r1
 80006ce:	b125      	cbz	r5, 80006da <__swsetup_r+0x16>
 80006d0:	69ab      	ldr	r3, [r5, #24]
 80006d2:	b913      	cbnz	r3, 80006da <__swsetup_r+0x16>
 80006d4:	4628      	mov	r0, r5
 80006d6:	f000 f97d 	bl	80009d4 <__sinit>
 80006da:	4b2e      	ldr	r3, [pc, #184]	; (8000794 <__swsetup_r+0xd0>)
 80006dc:	429c      	cmp	r4, r3
 80006de:	d10f      	bne.n	8000700 <__swsetup_r+0x3c>
 80006e0:	686c      	ldr	r4, [r5, #4]
 80006e2:	89a3      	ldrh	r3, [r4, #12]
 80006e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80006e8:	0719      	lsls	r1, r3, #28
 80006ea:	d42c      	bmi.n	8000746 <__swsetup_r+0x82>
 80006ec:	06dd      	lsls	r5, r3, #27
 80006ee:	d411      	bmi.n	8000714 <__swsetup_r+0x50>
 80006f0:	2309      	movs	r3, #9
 80006f2:	6033      	str	r3, [r6, #0]
 80006f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80006f8:	81a3      	strh	r3, [r4, #12]
 80006fa:	f04f 30ff 	mov.w	r0, #4294967295
 80006fe:	e03e      	b.n	800077e <__swsetup_r+0xba>
 8000700:	4b25      	ldr	r3, [pc, #148]	; (8000798 <__swsetup_r+0xd4>)
 8000702:	429c      	cmp	r4, r3
 8000704:	d101      	bne.n	800070a <__swsetup_r+0x46>
 8000706:	68ac      	ldr	r4, [r5, #8]
 8000708:	e7eb      	b.n	80006e2 <__swsetup_r+0x1e>
 800070a:	4b24      	ldr	r3, [pc, #144]	; (800079c <__swsetup_r+0xd8>)
 800070c:	429c      	cmp	r4, r3
 800070e:	bf08      	it	eq
 8000710:	68ec      	ldreq	r4, [r5, #12]
 8000712:	e7e6      	b.n	80006e2 <__swsetup_r+0x1e>
 8000714:	0758      	lsls	r0, r3, #29
 8000716:	d512      	bpl.n	800073e <__swsetup_r+0x7a>
 8000718:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800071a:	b141      	cbz	r1, 800072e <__swsetup_r+0x6a>
 800071c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000720:	4299      	cmp	r1, r3
 8000722:	d002      	beq.n	800072a <__swsetup_r+0x66>
 8000724:	4630      	mov	r0, r6
 8000726:	f000 fa5b 	bl	8000be0 <_free_r>
 800072a:	2300      	movs	r3, #0
 800072c:	6363      	str	r3, [r4, #52]	; 0x34
 800072e:	89a3      	ldrh	r3, [r4, #12]
 8000730:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000734:	81a3      	strh	r3, [r4, #12]
 8000736:	2300      	movs	r3, #0
 8000738:	6063      	str	r3, [r4, #4]
 800073a:	6923      	ldr	r3, [r4, #16]
 800073c:	6023      	str	r3, [r4, #0]
 800073e:	89a3      	ldrh	r3, [r4, #12]
 8000740:	f043 0308 	orr.w	r3, r3, #8
 8000744:	81a3      	strh	r3, [r4, #12]
 8000746:	6923      	ldr	r3, [r4, #16]
 8000748:	b94b      	cbnz	r3, 800075e <__swsetup_r+0x9a>
 800074a:	89a3      	ldrh	r3, [r4, #12]
 800074c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000750:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000754:	d003      	beq.n	800075e <__swsetup_r+0x9a>
 8000756:	4621      	mov	r1, r4
 8000758:	4630      	mov	r0, r6
 800075a:	f000 fa01 	bl	8000b60 <__smakebuf_r>
 800075e:	89a0      	ldrh	r0, [r4, #12]
 8000760:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000764:	f010 0301 	ands.w	r3, r0, #1
 8000768:	d00a      	beq.n	8000780 <__swsetup_r+0xbc>
 800076a:	2300      	movs	r3, #0
 800076c:	60a3      	str	r3, [r4, #8]
 800076e:	6963      	ldr	r3, [r4, #20]
 8000770:	425b      	negs	r3, r3
 8000772:	61a3      	str	r3, [r4, #24]
 8000774:	6923      	ldr	r3, [r4, #16]
 8000776:	b943      	cbnz	r3, 800078a <__swsetup_r+0xc6>
 8000778:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800077c:	d1ba      	bne.n	80006f4 <__swsetup_r+0x30>
 800077e:	bd70      	pop	{r4, r5, r6, pc}
 8000780:	0781      	lsls	r1, r0, #30
 8000782:	bf58      	it	pl
 8000784:	6963      	ldrpl	r3, [r4, #20]
 8000786:	60a3      	str	r3, [r4, #8]
 8000788:	e7f4      	b.n	8000774 <__swsetup_r+0xb0>
 800078a:	2000      	movs	r0, #0
 800078c:	e7f7      	b.n	800077e <__swsetup_r+0xba>
 800078e:	bf00      	nop
 8000790:	20000000 	.word	0x20000000
 8000794:	08000f78 	.word	0x08000f78
 8000798:	08000f98 	.word	0x08000f98
 800079c:	08000f58 	.word	0x08000f58

080007a0 <__sflush_r>:
 80007a0:	898a      	ldrh	r2, [r1, #12]
 80007a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007a6:	4605      	mov	r5, r0
 80007a8:	0710      	lsls	r0, r2, #28
 80007aa:	460c      	mov	r4, r1
 80007ac:	d458      	bmi.n	8000860 <__sflush_r+0xc0>
 80007ae:	684b      	ldr	r3, [r1, #4]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	dc05      	bgt.n	80007c0 <__sflush_r+0x20>
 80007b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	dc02      	bgt.n	80007c0 <__sflush_r+0x20>
 80007ba:	2000      	movs	r0, #0
 80007bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80007c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80007c2:	2e00      	cmp	r6, #0
 80007c4:	d0f9      	beq.n	80007ba <__sflush_r+0x1a>
 80007c6:	2300      	movs	r3, #0
 80007c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80007cc:	682f      	ldr	r7, [r5, #0]
 80007ce:	602b      	str	r3, [r5, #0]
 80007d0:	d032      	beq.n	8000838 <__sflush_r+0x98>
 80007d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80007d4:	89a3      	ldrh	r3, [r4, #12]
 80007d6:	075a      	lsls	r2, r3, #29
 80007d8:	d505      	bpl.n	80007e6 <__sflush_r+0x46>
 80007da:	6863      	ldr	r3, [r4, #4]
 80007dc:	1ac0      	subs	r0, r0, r3
 80007de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80007e0:	b10b      	cbz	r3, 80007e6 <__sflush_r+0x46>
 80007e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007e4:	1ac0      	subs	r0, r0, r3
 80007e6:	2300      	movs	r3, #0
 80007e8:	4602      	mov	r2, r0
 80007ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80007ec:	6a21      	ldr	r1, [r4, #32]
 80007ee:	4628      	mov	r0, r5
 80007f0:	47b0      	blx	r6
 80007f2:	1c43      	adds	r3, r0, #1
 80007f4:	89a3      	ldrh	r3, [r4, #12]
 80007f6:	d106      	bne.n	8000806 <__sflush_r+0x66>
 80007f8:	6829      	ldr	r1, [r5, #0]
 80007fa:	291d      	cmp	r1, #29
 80007fc:	d82c      	bhi.n	8000858 <__sflush_r+0xb8>
 80007fe:	4a2a      	ldr	r2, [pc, #168]	; (80008a8 <__sflush_r+0x108>)
 8000800:	40ca      	lsrs	r2, r1
 8000802:	07d6      	lsls	r6, r2, #31
 8000804:	d528      	bpl.n	8000858 <__sflush_r+0xb8>
 8000806:	2200      	movs	r2, #0
 8000808:	6062      	str	r2, [r4, #4]
 800080a:	04d9      	lsls	r1, r3, #19
 800080c:	6922      	ldr	r2, [r4, #16]
 800080e:	6022      	str	r2, [r4, #0]
 8000810:	d504      	bpl.n	800081c <__sflush_r+0x7c>
 8000812:	1c42      	adds	r2, r0, #1
 8000814:	d101      	bne.n	800081a <__sflush_r+0x7a>
 8000816:	682b      	ldr	r3, [r5, #0]
 8000818:	b903      	cbnz	r3, 800081c <__sflush_r+0x7c>
 800081a:	6560      	str	r0, [r4, #84]	; 0x54
 800081c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800081e:	602f      	str	r7, [r5, #0]
 8000820:	2900      	cmp	r1, #0
 8000822:	d0ca      	beq.n	80007ba <__sflush_r+0x1a>
 8000824:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000828:	4299      	cmp	r1, r3
 800082a:	d002      	beq.n	8000832 <__sflush_r+0x92>
 800082c:	4628      	mov	r0, r5
 800082e:	f000 f9d7 	bl	8000be0 <_free_r>
 8000832:	2000      	movs	r0, #0
 8000834:	6360      	str	r0, [r4, #52]	; 0x34
 8000836:	e7c1      	b.n	80007bc <__sflush_r+0x1c>
 8000838:	6a21      	ldr	r1, [r4, #32]
 800083a:	2301      	movs	r3, #1
 800083c:	4628      	mov	r0, r5
 800083e:	47b0      	blx	r6
 8000840:	1c41      	adds	r1, r0, #1
 8000842:	d1c7      	bne.n	80007d4 <__sflush_r+0x34>
 8000844:	682b      	ldr	r3, [r5, #0]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d0c4      	beq.n	80007d4 <__sflush_r+0x34>
 800084a:	2b1d      	cmp	r3, #29
 800084c:	d001      	beq.n	8000852 <__sflush_r+0xb2>
 800084e:	2b16      	cmp	r3, #22
 8000850:	d101      	bne.n	8000856 <__sflush_r+0xb6>
 8000852:	602f      	str	r7, [r5, #0]
 8000854:	e7b1      	b.n	80007ba <__sflush_r+0x1a>
 8000856:	89a3      	ldrh	r3, [r4, #12]
 8000858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800085c:	81a3      	strh	r3, [r4, #12]
 800085e:	e7ad      	b.n	80007bc <__sflush_r+0x1c>
 8000860:	690f      	ldr	r7, [r1, #16]
 8000862:	2f00      	cmp	r7, #0
 8000864:	d0a9      	beq.n	80007ba <__sflush_r+0x1a>
 8000866:	0793      	lsls	r3, r2, #30
 8000868:	680e      	ldr	r6, [r1, #0]
 800086a:	bf08      	it	eq
 800086c:	694b      	ldreq	r3, [r1, #20]
 800086e:	600f      	str	r7, [r1, #0]
 8000870:	bf18      	it	ne
 8000872:	2300      	movne	r3, #0
 8000874:	eba6 0807 	sub.w	r8, r6, r7
 8000878:	608b      	str	r3, [r1, #8]
 800087a:	f1b8 0f00 	cmp.w	r8, #0
 800087e:	dd9c      	ble.n	80007ba <__sflush_r+0x1a>
 8000880:	6a21      	ldr	r1, [r4, #32]
 8000882:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000884:	4643      	mov	r3, r8
 8000886:	463a      	mov	r2, r7
 8000888:	4628      	mov	r0, r5
 800088a:	47b0      	blx	r6
 800088c:	2800      	cmp	r0, #0
 800088e:	dc06      	bgt.n	800089e <__sflush_r+0xfe>
 8000890:	89a3      	ldrh	r3, [r4, #12]
 8000892:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000896:	81a3      	strh	r3, [r4, #12]
 8000898:	f04f 30ff 	mov.w	r0, #4294967295
 800089c:	e78e      	b.n	80007bc <__sflush_r+0x1c>
 800089e:	4407      	add	r7, r0
 80008a0:	eba8 0800 	sub.w	r8, r8, r0
 80008a4:	e7e9      	b.n	800087a <__sflush_r+0xda>
 80008a6:	bf00      	nop
 80008a8:	20400001 	.word	0x20400001

080008ac <_fflush_r>:
 80008ac:	b538      	push	{r3, r4, r5, lr}
 80008ae:	690b      	ldr	r3, [r1, #16]
 80008b0:	4605      	mov	r5, r0
 80008b2:	460c      	mov	r4, r1
 80008b4:	b913      	cbnz	r3, 80008bc <_fflush_r+0x10>
 80008b6:	2500      	movs	r5, #0
 80008b8:	4628      	mov	r0, r5
 80008ba:	bd38      	pop	{r3, r4, r5, pc}
 80008bc:	b118      	cbz	r0, 80008c6 <_fflush_r+0x1a>
 80008be:	6983      	ldr	r3, [r0, #24]
 80008c0:	b90b      	cbnz	r3, 80008c6 <_fflush_r+0x1a>
 80008c2:	f000 f887 	bl	80009d4 <__sinit>
 80008c6:	4b14      	ldr	r3, [pc, #80]	; (8000918 <_fflush_r+0x6c>)
 80008c8:	429c      	cmp	r4, r3
 80008ca:	d11b      	bne.n	8000904 <_fflush_r+0x58>
 80008cc:	686c      	ldr	r4, [r5, #4]
 80008ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d0ef      	beq.n	80008b6 <_fflush_r+0xa>
 80008d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80008d8:	07d0      	lsls	r0, r2, #31
 80008da:	d404      	bmi.n	80008e6 <_fflush_r+0x3a>
 80008dc:	0599      	lsls	r1, r3, #22
 80008de:	d402      	bmi.n	80008e6 <_fflush_r+0x3a>
 80008e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80008e2:	f000 f915 	bl	8000b10 <__retarget_lock_acquire_recursive>
 80008e6:	4628      	mov	r0, r5
 80008e8:	4621      	mov	r1, r4
 80008ea:	f7ff ff59 	bl	80007a0 <__sflush_r>
 80008ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80008f0:	07da      	lsls	r2, r3, #31
 80008f2:	4605      	mov	r5, r0
 80008f4:	d4e0      	bmi.n	80008b8 <_fflush_r+0xc>
 80008f6:	89a3      	ldrh	r3, [r4, #12]
 80008f8:	059b      	lsls	r3, r3, #22
 80008fa:	d4dd      	bmi.n	80008b8 <_fflush_r+0xc>
 80008fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80008fe:	f000 f908 	bl	8000b12 <__retarget_lock_release_recursive>
 8000902:	e7d9      	b.n	80008b8 <_fflush_r+0xc>
 8000904:	4b05      	ldr	r3, [pc, #20]	; (800091c <_fflush_r+0x70>)
 8000906:	429c      	cmp	r4, r3
 8000908:	d101      	bne.n	800090e <_fflush_r+0x62>
 800090a:	68ac      	ldr	r4, [r5, #8]
 800090c:	e7df      	b.n	80008ce <_fflush_r+0x22>
 800090e:	4b04      	ldr	r3, [pc, #16]	; (8000920 <_fflush_r+0x74>)
 8000910:	429c      	cmp	r4, r3
 8000912:	bf08      	it	eq
 8000914:	68ec      	ldreq	r4, [r5, #12]
 8000916:	e7da      	b.n	80008ce <_fflush_r+0x22>
 8000918:	08000f78 	.word	0x08000f78
 800091c:	08000f98 	.word	0x08000f98
 8000920:	08000f58 	.word	0x08000f58

08000924 <std>:
 8000924:	2300      	movs	r3, #0
 8000926:	b510      	push	{r4, lr}
 8000928:	4604      	mov	r4, r0
 800092a:	e9c0 3300 	strd	r3, r3, [r0]
 800092e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000932:	6083      	str	r3, [r0, #8]
 8000934:	8181      	strh	r1, [r0, #12]
 8000936:	6643      	str	r3, [r0, #100]	; 0x64
 8000938:	81c2      	strh	r2, [r0, #14]
 800093a:	6183      	str	r3, [r0, #24]
 800093c:	4619      	mov	r1, r3
 800093e:	2208      	movs	r2, #8
 8000940:	305c      	adds	r0, #92	; 0x5c
 8000942:	f7ff fdef 	bl	8000524 <memset>
 8000946:	4b05      	ldr	r3, [pc, #20]	; (800095c <std+0x38>)
 8000948:	6263      	str	r3, [r4, #36]	; 0x24
 800094a:	4b05      	ldr	r3, [pc, #20]	; (8000960 <std+0x3c>)
 800094c:	62a3      	str	r3, [r4, #40]	; 0x28
 800094e:	4b05      	ldr	r3, [pc, #20]	; (8000964 <std+0x40>)
 8000950:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000952:	4b05      	ldr	r3, [pc, #20]	; (8000968 <std+0x44>)
 8000954:	6224      	str	r4, [r4, #32]
 8000956:	6323      	str	r3, [r4, #48]	; 0x30
 8000958:	bd10      	pop	{r4, pc}
 800095a:	bf00      	nop
 800095c:	08000dc1 	.word	0x08000dc1
 8000960:	08000de3 	.word	0x08000de3
 8000964:	08000e1b 	.word	0x08000e1b
 8000968:	08000e3f 	.word	0x08000e3f

0800096c <_cleanup_r>:
 800096c:	4901      	ldr	r1, [pc, #4]	; (8000974 <_cleanup_r+0x8>)
 800096e:	f000 b8af 	b.w	8000ad0 <_fwalk_reent>
 8000972:	bf00      	nop
 8000974:	080008ad 	.word	0x080008ad

08000978 <__sfmoreglue>:
 8000978:	b570      	push	{r4, r5, r6, lr}
 800097a:	2268      	movs	r2, #104	; 0x68
 800097c:	1e4d      	subs	r5, r1, #1
 800097e:	4355      	muls	r5, r2
 8000980:	460e      	mov	r6, r1
 8000982:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000986:	f000 f997 	bl	8000cb8 <_malloc_r>
 800098a:	4604      	mov	r4, r0
 800098c:	b140      	cbz	r0, 80009a0 <__sfmoreglue+0x28>
 800098e:	2100      	movs	r1, #0
 8000990:	e9c0 1600 	strd	r1, r6, [r0]
 8000994:	300c      	adds	r0, #12
 8000996:	60a0      	str	r0, [r4, #8]
 8000998:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800099c:	f7ff fdc2 	bl	8000524 <memset>
 80009a0:	4620      	mov	r0, r4
 80009a2:	bd70      	pop	{r4, r5, r6, pc}

080009a4 <__sfp_lock_acquire>:
 80009a4:	4801      	ldr	r0, [pc, #4]	; (80009ac <__sfp_lock_acquire+0x8>)
 80009a6:	f000 b8b3 	b.w	8000b10 <__retarget_lock_acquire_recursive>
 80009aa:	bf00      	nop
 80009ac:	20000085 	.word	0x20000085

080009b0 <__sfp_lock_release>:
 80009b0:	4801      	ldr	r0, [pc, #4]	; (80009b8 <__sfp_lock_release+0x8>)
 80009b2:	f000 b8ae 	b.w	8000b12 <__retarget_lock_release_recursive>
 80009b6:	bf00      	nop
 80009b8:	20000085 	.word	0x20000085

080009bc <__sinit_lock_acquire>:
 80009bc:	4801      	ldr	r0, [pc, #4]	; (80009c4 <__sinit_lock_acquire+0x8>)
 80009be:	f000 b8a7 	b.w	8000b10 <__retarget_lock_acquire_recursive>
 80009c2:	bf00      	nop
 80009c4:	20000086 	.word	0x20000086

080009c8 <__sinit_lock_release>:
 80009c8:	4801      	ldr	r0, [pc, #4]	; (80009d0 <__sinit_lock_release+0x8>)
 80009ca:	f000 b8a2 	b.w	8000b12 <__retarget_lock_release_recursive>
 80009ce:	bf00      	nop
 80009d0:	20000086 	.word	0x20000086

080009d4 <__sinit>:
 80009d4:	b510      	push	{r4, lr}
 80009d6:	4604      	mov	r4, r0
 80009d8:	f7ff fff0 	bl	80009bc <__sinit_lock_acquire>
 80009dc:	69a3      	ldr	r3, [r4, #24]
 80009de:	b11b      	cbz	r3, 80009e8 <__sinit+0x14>
 80009e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80009e4:	f7ff bff0 	b.w	80009c8 <__sinit_lock_release>
 80009e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80009ec:	6523      	str	r3, [r4, #80]	; 0x50
 80009ee:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <__sinit+0x68>)
 80009f0:	4a13      	ldr	r2, [pc, #76]	; (8000a40 <__sinit+0x6c>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80009f6:	42a3      	cmp	r3, r4
 80009f8:	bf04      	itt	eq
 80009fa:	2301      	moveq	r3, #1
 80009fc:	61a3      	streq	r3, [r4, #24]
 80009fe:	4620      	mov	r0, r4
 8000a00:	f000 f820 	bl	8000a44 <__sfp>
 8000a04:	6060      	str	r0, [r4, #4]
 8000a06:	4620      	mov	r0, r4
 8000a08:	f000 f81c 	bl	8000a44 <__sfp>
 8000a0c:	60a0      	str	r0, [r4, #8]
 8000a0e:	4620      	mov	r0, r4
 8000a10:	f000 f818 	bl	8000a44 <__sfp>
 8000a14:	2200      	movs	r2, #0
 8000a16:	60e0      	str	r0, [r4, #12]
 8000a18:	2104      	movs	r1, #4
 8000a1a:	6860      	ldr	r0, [r4, #4]
 8000a1c:	f7ff ff82 	bl	8000924 <std>
 8000a20:	68a0      	ldr	r0, [r4, #8]
 8000a22:	2201      	movs	r2, #1
 8000a24:	2109      	movs	r1, #9
 8000a26:	f7ff ff7d 	bl	8000924 <std>
 8000a2a:	68e0      	ldr	r0, [r4, #12]
 8000a2c:	2202      	movs	r2, #2
 8000a2e:	2112      	movs	r1, #18
 8000a30:	f7ff ff78 	bl	8000924 <std>
 8000a34:	2301      	movs	r3, #1
 8000a36:	61a3      	str	r3, [r4, #24]
 8000a38:	e7d2      	b.n	80009e0 <__sinit+0xc>
 8000a3a:	bf00      	nop
 8000a3c:	08000f54 	.word	0x08000f54
 8000a40:	0800096d 	.word	0x0800096d

08000a44 <__sfp>:
 8000a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a46:	4607      	mov	r7, r0
 8000a48:	f7ff ffac 	bl	80009a4 <__sfp_lock_acquire>
 8000a4c:	4b1e      	ldr	r3, [pc, #120]	; (8000ac8 <__sfp+0x84>)
 8000a4e:	681e      	ldr	r6, [r3, #0]
 8000a50:	69b3      	ldr	r3, [r6, #24]
 8000a52:	b913      	cbnz	r3, 8000a5a <__sfp+0x16>
 8000a54:	4630      	mov	r0, r6
 8000a56:	f7ff ffbd 	bl	80009d4 <__sinit>
 8000a5a:	3648      	adds	r6, #72	; 0x48
 8000a5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000a60:	3b01      	subs	r3, #1
 8000a62:	d503      	bpl.n	8000a6c <__sfp+0x28>
 8000a64:	6833      	ldr	r3, [r6, #0]
 8000a66:	b30b      	cbz	r3, 8000aac <__sfp+0x68>
 8000a68:	6836      	ldr	r6, [r6, #0]
 8000a6a:	e7f7      	b.n	8000a5c <__sfp+0x18>
 8000a6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000a70:	b9d5      	cbnz	r5, 8000aa8 <__sfp+0x64>
 8000a72:	4b16      	ldr	r3, [pc, #88]	; (8000acc <__sfp+0x88>)
 8000a74:	60e3      	str	r3, [r4, #12]
 8000a76:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000a7a:	6665      	str	r5, [r4, #100]	; 0x64
 8000a7c:	f000 f847 	bl	8000b0e <__retarget_lock_init_recursive>
 8000a80:	f7ff ff96 	bl	80009b0 <__sfp_lock_release>
 8000a84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000a88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000a8c:	6025      	str	r5, [r4, #0]
 8000a8e:	61a5      	str	r5, [r4, #24]
 8000a90:	2208      	movs	r2, #8
 8000a92:	4629      	mov	r1, r5
 8000a94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000a98:	f7ff fd44 	bl	8000524 <memset>
 8000a9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000aa0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000aa4:	4620      	mov	r0, r4
 8000aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000aa8:	3468      	adds	r4, #104	; 0x68
 8000aaa:	e7d9      	b.n	8000a60 <__sfp+0x1c>
 8000aac:	2104      	movs	r1, #4
 8000aae:	4638      	mov	r0, r7
 8000ab0:	f7ff ff62 	bl	8000978 <__sfmoreglue>
 8000ab4:	4604      	mov	r4, r0
 8000ab6:	6030      	str	r0, [r6, #0]
 8000ab8:	2800      	cmp	r0, #0
 8000aba:	d1d5      	bne.n	8000a68 <__sfp+0x24>
 8000abc:	f7ff ff78 	bl	80009b0 <__sfp_lock_release>
 8000ac0:	230c      	movs	r3, #12
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	e7ee      	b.n	8000aa4 <__sfp+0x60>
 8000ac6:	bf00      	nop
 8000ac8:	08000f54 	.word	0x08000f54
 8000acc:	ffff0001 	.word	0xffff0001

08000ad0 <_fwalk_reent>:
 8000ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ad4:	4606      	mov	r6, r0
 8000ad6:	4688      	mov	r8, r1
 8000ad8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000adc:	2700      	movs	r7, #0
 8000ade:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000ae2:	f1b9 0901 	subs.w	r9, r9, #1
 8000ae6:	d505      	bpl.n	8000af4 <_fwalk_reent+0x24>
 8000ae8:	6824      	ldr	r4, [r4, #0]
 8000aea:	2c00      	cmp	r4, #0
 8000aec:	d1f7      	bne.n	8000ade <_fwalk_reent+0xe>
 8000aee:	4638      	mov	r0, r7
 8000af0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000af4:	89ab      	ldrh	r3, [r5, #12]
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d907      	bls.n	8000b0a <_fwalk_reent+0x3a>
 8000afa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000afe:	3301      	adds	r3, #1
 8000b00:	d003      	beq.n	8000b0a <_fwalk_reent+0x3a>
 8000b02:	4629      	mov	r1, r5
 8000b04:	4630      	mov	r0, r6
 8000b06:	47c0      	blx	r8
 8000b08:	4307      	orrs	r7, r0
 8000b0a:	3568      	adds	r5, #104	; 0x68
 8000b0c:	e7e9      	b.n	8000ae2 <_fwalk_reent+0x12>

08000b0e <__retarget_lock_init_recursive>:
 8000b0e:	4770      	bx	lr

08000b10 <__retarget_lock_acquire_recursive>:
 8000b10:	4770      	bx	lr

08000b12 <__retarget_lock_release_recursive>:
 8000b12:	4770      	bx	lr

08000b14 <__swhatbuf_r>:
 8000b14:	b570      	push	{r4, r5, r6, lr}
 8000b16:	460e      	mov	r6, r1
 8000b18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b1c:	2900      	cmp	r1, #0
 8000b1e:	b096      	sub	sp, #88	; 0x58
 8000b20:	4614      	mov	r4, r2
 8000b22:	461d      	mov	r5, r3
 8000b24:	da08      	bge.n	8000b38 <__swhatbuf_r+0x24>
 8000b26:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	602a      	str	r2, [r5, #0]
 8000b2e:	061a      	lsls	r2, r3, #24
 8000b30:	d410      	bmi.n	8000b54 <__swhatbuf_r+0x40>
 8000b32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b36:	e00e      	b.n	8000b56 <__swhatbuf_r+0x42>
 8000b38:	466a      	mov	r2, sp
 8000b3a:	f000 f9a7 	bl	8000e8c <_fstat_r>
 8000b3e:	2800      	cmp	r0, #0
 8000b40:	dbf1      	blt.n	8000b26 <__swhatbuf_r+0x12>
 8000b42:	9a01      	ldr	r2, [sp, #4]
 8000b44:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000b48:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000b4c:	425a      	negs	r2, r3
 8000b4e:	415a      	adcs	r2, r3
 8000b50:	602a      	str	r2, [r5, #0]
 8000b52:	e7ee      	b.n	8000b32 <__swhatbuf_r+0x1e>
 8000b54:	2340      	movs	r3, #64	; 0x40
 8000b56:	2000      	movs	r0, #0
 8000b58:	6023      	str	r3, [r4, #0]
 8000b5a:	b016      	add	sp, #88	; 0x58
 8000b5c:	bd70      	pop	{r4, r5, r6, pc}
	...

08000b60 <__smakebuf_r>:
 8000b60:	898b      	ldrh	r3, [r1, #12]
 8000b62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000b64:	079d      	lsls	r5, r3, #30
 8000b66:	4606      	mov	r6, r0
 8000b68:	460c      	mov	r4, r1
 8000b6a:	d507      	bpl.n	8000b7c <__smakebuf_r+0x1c>
 8000b6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000b70:	6023      	str	r3, [r4, #0]
 8000b72:	6123      	str	r3, [r4, #16]
 8000b74:	2301      	movs	r3, #1
 8000b76:	6163      	str	r3, [r4, #20]
 8000b78:	b002      	add	sp, #8
 8000b7a:	bd70      	pop	{r4, r5, r6, pc}
 8000b7c:	ab01      	add	r3, sp, #4
 8000b7e:	466a      	mov	r2, sp
 8000b80:	f7ff ffc8 	bl	8000b14 <__swhatbuf_r>
 8000b84:	9900      	ldr	r1, [sp, #0]
 8000b86:	4605      	mov	r5, r0
 8000b88:	4630      	mov	r0, r6
 8000b8a:	f000 f895 	bl	8000cb8 <_malloc_r>
 8000b8e:	b948      	cbnz	r0, 8000ba4 <__smakebuf_r+0x44>
 8000b90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b94:	059a      	lsls	r2, r3, #22
 8000b96:	d4ef      	bmi.n	8000b78 <__smakebuf_r+0x18>
 8000b98:	f023 0303 	bic.w	r3, r3, #3
 8000b9c:	f043 0302 	orr.w	r3, r3, #2
 8000ba0:	81a3      	strh	r3, [r4, #12]
 8000ba2:	e7e3      	b.n	8000b6c <__smakebuf_r+0xc>
 8000ba4:	4b0d      	ldr	r3, [pc, #52]	; (8000bdc <__smakebuf_r+0x7c>)
 8000ba6:	62b3      	str	r3, [r6, #40]	; 0x28
 8000ba8:	89a3      	ldrh	r3, [r4, #12]
 8000baa:	6020      	str	r0, [r4, #0]
 8000bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bb0:	81a3      	strh	r3, [r4, #12]
 8000bb2:	9b00      	ldr	r3, [sp, #0]
 8000bb4:	6163      	str	r3, [r4, #20]
 8000bb6:	9b01      	ldr	r3, [sp, #4]
 8000bb8:	6120      	str	r0, [r4, #16]
 8000bba:	b15b      	cbz	r3, 8000bd4 <__smakebuf_r+0x74>
 8000bbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	f000 f975 	bl	8000eb0 <_isatty_r>
 8000bc6:	b128      	cbz	r0, 8000bd4 <__smakebuf_r+0x74>
 8000bc8:	89a3      	ldrh	r3, [r4, #12]
 8000bca:	f023 0303 	bic.w	r3, r3, #3
 8000bce:	f043 0301 	orr.w	r3, r3, #1
 8000bd2:	81a3      	strh	r3, [r4, #12]
 8000bd4:	89a0      	ldrh	r0, [r4, #12]
 8000bd6:	4305      	orrs	r5, r0
 8000bd8:	81a5      	strh	r5, [r4, #12]
 8000bda:	e7cd      	b.n	8000b78 <__smakebuf_r+0x18>
 8000bdc:	0800096d 	.word	0x0800096d

08000be0 <_free_r>:
 8000be0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000be2:	2900      	cmp	r1, #0
 8000be4:	d044      	beq.n	8000c70 <_free_r+0x90>
 8000be6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000bea:	9001      	str	r0, [sp, #4]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	f1a1 0404 	sub.w	r4, r1, #4
 8000bf2:	bfb8      	it	lt
 8000bf4:	18e4      	addlt	r4, r4, r3
 8000bf6:	f000 f97d 	bl	8000ef4 <__malloc_lock>
 8000bfa:	4a1e      	ldr	r2, [pc, #120]	; (8000c74 <_free_r+0x94>)
 8000bfc:	9801      	ldr	r0, [sp, #4]
 8000bfe:	6813      	ldr	r3, [r2, #0]
 8000c00:	b933      	cbnz	r3, 8000c10 <_free_r+0x30>
 8000c02:	6063      	str	r3, [r4, #4]
 8000c04:	6014      	str	r4, [r2, #0]
 8000c06:	b003      	add	sp, #12
 8000c08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000c0c:	f000 b978 	b.w	8000f00 <__malloc_unlock>
 8000c10:	42a3      	cmp	r3, r4
 8000c12:	d908      	bls.n	8000c26 <_free_r+0x46>
 8000c14:	6825      	ldr	r5, [r4, #0]
 8000c16:	1961      	adds	r1, r4, r5
 8000c18:	428b      	cmp	r3, r1
 8000c1a:	bf01      	itttt	eq
 8000c1c:	6819      	ldreq	r1, [r3, #0]
 8000c1e:	685b      	ldreq	r3, [r3, #4]
 8000c20:	1949      	addeq	r1, r1, r5
 8000c22:	6021      	streq	r1, [r4, #0]
 8000c24:	e7ed      	b.n	8000c02 <_free_r+0x22>
 8000c26:	461a      	mov	r2, r3
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	b10b      	cbz	r3, 8000c30 <_free_r+0x50>
 8000c2c:	42a3      	cmp	r3, r4
 8000c2e:	d9fa      	bls.n	8000c26 <_free_r+0x46>
 8000c30:	6811      	ldr	r1, [r2, #0]
 8000c32:	1855      	adds	r5, r2, r1
 8000c34:	42a5      	cmp	r5, r4
 8000c36:	d10b      	bne.n	8000c50 <_free_r+0x70>
 8000c38:	6824      	ldr	r4, [r4, #0]
 8000c3a:	4421      	add	r1, r4
 8000c3c:	1854      	adds	r4, r2, r1
 8000c3e:	42a3      	cmp	r3, r4
 8000c40:	6011      	str	r1, [r2, #0]
 8000c42:	d1e0      	bne.n	8000c06 <_free_r+0x26>
 8000c44:	681c      	ldr	r4, [r3, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	6053      	str	r3, [r2, #4]
 8000c4a:	4421      	add	r1, r4
 8000c4c:	6011      	str	r1, [r2, #0]
 8000c4e:	e7da      	b.n	8000c06 <_free_r+0x26>
 8000c50:	d902      	bls.n	8000c58 <_free_r+0x78>
 8000c52:	230c      	movs	r3, #12
 8000c54:	6003      	str	r3, [r0, #0]
 8000c56:	e7d6      	b.n	8000c06 <_free_r+0x26>
 8000c58:	6825      	ldr	r5, [r4, #0]
 8000c5a:	1961      	adds	r1, r4, r5
 8000c5c:	428b      	cmp	r3, r1
 8000c5e:	bf04      	itt	eq
 8000c60:	6819      	ldreq	r1, [r3, #0]
 8000c62:	685b      	ldreq	r3, [r3, #4]
 8000c64:	6063      	str	r3, [r4, #4]
 8000c66:	bf04      	itt	eq
 8000c68:	1949      	addeq	r1, r1, r5
 8000c6a:	6021      	streq	r1, [r4, #0]
 8000c6c:	6054      	str	r4, [r2, #4]
 8000c6e:	e7ca      	b.n	8000c06 <_free_r+0x26>
 8000c70:	b003      	add	sp, #12
 8000c72:	bd30      	pop	{r4, r5, pc}
 8000c74:	20000088 	.word	0x20000088

08000c78 <sbrk_aligned>:
 8000c78:	b570      	push	{r4, r5, r6, lr}
 8000c7a:	4e0e      	ldr	r6, [pc, #56]	; (8000cb4 <sbrk_aligned+0x3c>)
 8000c7c:	460c      	mov	r4, r1
 8000c7e:	6831      	ldr	r1, [r6, #0]
 8000c80:	4605      	mov	r5, r0
 8000c82:	b911      	cbnz	r1, 8000c8a <sbrk_aligned+0x12>
 8000c84:	f000 f88c 	bl	8000da0 <_sbrk_r>
 8000c88:	6030      	str	r0, [r6, #0]
 8000c8a:	4621      	mov	r1, r4
 8000c8c:	4628      	mov	r0, r5
 8000c8e:	f000 f887 	bl	8000da0 <_sbrk_r>
 8000c92:	1c43      	adds	r3, r0, #1
 8000c94:	d00a      	beq.n	8000cac <sbrk_aligned+0x34>
 8000c96:	1cc4      	adds	r4, r0, #3
 8000c98:	f024 0403 	bic.w	r4, r4, #3
 8000c9c:	42a0      	cmp	r0, r4
 8000c9e:	d007      	beq.n	8000cb0 <sbrk_aligned+0x38>
 8000ca0:	1a21      	subs	r1, r4, r0
 8000ca2:	4628      	mov	r0, r5
 8000ca4:	f000 f87c 	bl	8000da0 <_sbrk_r>
 8000ca8:	3001      	adds	r0, #1
 8000caa:	d101      	bne.n	8000cb0 <sbrk_aligned+0x38>
 8000cac:	f04f 34ff 	mov.w	r4, #4294967295
 8000cb0:	4620      	mov	r0, r4
 8000cb2:	bd70      	pop	{r4, r5, r6, pc}
 8000cb4:	2000008c 	.word	0x2000008c

08000cb8 <_malloc_r>:
 8000cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cbc:	1ccd      	adds	r5, r1, #3
 8000cbe:	f025 0503 	bic.w	r5, r5, #3
 8000cc2:	3508      	adds	r5, #8
 8000cc4:	2d0c      	cmp	r5, #12
 8000cc6:	bf38      	it	cc
 8000cc8:	250c      	movcc	r5, #12
 8000cca:	2d00      	cmp	r5, #0
 8000ccc:	4607      	mov	r7, r0
 8000cce:	db01      	blt.n	8000cd4 <_malloc_r+0x1c>
 8000cd0:	42a9      	cmp	r1, r5
 8000cd2:	d905      	bls.n	8000ce0 <_malloc_r+0x28>
 8000cd4:	230c      	movs	r3, #12
 8000cd6:	603b      	str	r3, [r7, #0]
 8000cd8:	2600      	movs	r6, #0
 8000cda:	4630      	mov	r0, r6
 8000cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ce0:	4e2e      	ldr	r6, [pc, #184]	; (8000d9c <_malloc_r+0xe4>)
 8000ce2:	f000 f907 	bl	8000ef4 <__malloc_lock>
 8000ce6:	6833      	ldr	r3, [r6, #0]
 8000ce8:	461c      	mov	r4, r3
 8000cea:	bb34      	cbnz	r4, 8000d3a <_malloc_r+0x82>
 8000cec:	4629      	mov	r1, r5
 8000cee:	4638      	mov	r0, r7
 8000cf0:	f7ff ffc2 	bl	8000c78 <sbrk_aligned>
 8000cf4:	1c43      	adds	r3, r0, #1
 8000cf6:	4604      	mov	r4, r0
 8000cf8:	d14d      	bne.n	8000d96 <_malloc_r+0xde>
 8000cfa:	6834      	ldr	r4, [r6, #0]
 8000cfc:	4626      	mov	r6, r4
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	d140      	bne.n	8000d84 <_malloc_r+0xcc>
 8000d02:	6823      	ldr	r3, [r4, #0]
 8000d04:	4631      	mov	r1, r6
 8000d06:	4638      	mov	r0, r7
 8000d08:	eb04 0803 	add.w	r8, r4, r3
 8000d0c:	f000 f848 	bl	8000da0 <_sbrk_r>
 8000d10:	4580      	cmp	r8, r0
 8000d12:	d13a      	bne.n	8000d8a <_malloc_r+0xd2>
 8000d14:	6821      	ldr	r1, [r4, #0]
 8000d16:	3503      	adds	r5, #3
 8000d18:	1a6d      	subs	r5, r5, r1
 8000d1a:	f025 0503 	bic.w	r5, r5, #3
 8000d1e:	3508      	adds	r5, #8
 8000d20:	2d0c      	cmp	r5, #12
 8000d22:	bf38      	it	cc
 8000d24:	250c      	movcc	r5, #12
 8000d26:	4629      	mov	r1, r5
 8000d28:	4638      	mov	r0, r7
 8000d2a:	f7ff ffa5 	bl	8000c78 <sbrk_aligned>
 8000d2e:	3001      	adds	r0, #1
 8000d30:	d02b      	beq.n	8000d8a <_malloc_r+0xd2>
 8000d32:	6823      	ldr	r3, [r4, #0]
 8000d34:	442b      	add	r3, r5
 8000d36:	6023      	str	r3, [r4, #0]
 8000d38:	e00e      	b.n	8000d58 <_malloc_r+0xa0>
 8000d3a:	6822      	ldr	r2, [r4, #0]
 8000d3c:	1b52      	subs	r2, r2, r5
 8000d3e:	d41e      	bmi.n	8000d7e <_malloc_r+0xc6>
 8000d40:	2a0b      	cmp	r2, #11
 8000d42:	d916      	bls.n	8000d72 <_malloc_r+0xba>
 8000d44:	1961      	adds	r1, r4, r5
 8000d46:	42a3      	cmp	r3, r4
 8000d48:	6025      	str	r5, [r4, #0]
 8000d4a:	bf18      	it	ne
 8000d4c:	6059      	strne	r1, [r3, #4]
 8000d4e:	6863      	ldr	r3, [r4, #4]
 8000d50:	bf08      	it	eq
 8000d52:	6031      	streq	r1, [r6, #0]
 8000d54:	5162      	str	r2, [r4, r5]
 8000d56:	604b      	str	r3, [r1, #4]
 8000d58:	4638      	mov	r0, r7
 8000d5a:	f104 060b 	add.w	r6, r4, #11
 8000d5e:	f000 f8cf 	bl	8000f00 <__malloc_unlock>
 8000d62:	f026 0607 	bic.w	r6, r6, #7
 8000d66:	1d23      	adds	r3, r4, #4
 8000d68:	1af2      	subs	r2, r6, r3
 8000d6a:	d0b6      	beq.n	8000cda <_malloc_r+0x22>
 8000d6c:	1b9b      	subs	r3, r3, r6
 8000d6e:	50a3      	str	r3, [r4, r2]
 8000d70:	e7b3      	b.n	8000cda <_malloc_r+0x22>
 8000d72:	6862      	ldr	r2, [r4, #4]
 8000d74:	42a3      	cmp	r3, r4
 8000d76:	bf0c      	ite	eq
 8000d78:	6032      	streq	r2, [r6, #0]
 8000d7a:	605a      	strne	r2, [r3, #4]
 8000d7c:	e7ec      	b.n	8000d58 <_malloc_r+0xa0>
 8000d7e:	4623      	mov	r3, r4
 8000d80:	6864      	ldr	r4, [r4, #4]
 8000d82:	e7b2      	b.n	8000cea <_malloc_r+0x32>
 8000d84:	4634      	mov	r4, r6
 8000d86:	6876      	ldr	r6, [r6, #4]
 8000d88:	e7b9      	b.n	8000cfe <_malloc_r+0x46>
 8000d8a:	230c      	movs	r3, #12
 8000d8c:	603b      	str	r3, [r7, #0]
 8000d8e:	4638      	mov	r0, r7
 8000d90:	f000 f8b6 	bl	8000f00 <__malloc_unlock>
 8000d94:	e7a1      	b.n	8000cda <_malloc_r+0x22>
 8000d96:	6025      	str	r5, [r4, #0]
 8000d98:	e7de      	b.n	8000d58 <_malloc_r+0xa0>
 8000d9a:	bf00      	nop
 8000d9c:	20000088 	.word	0x20000088

08000da0 <_sbrk_r>:
 8000da0:	b538      	push	{r3, r4, r5, lr}
 8000da2:	4d06      	ldr	r5, [pc, #24]	; (8000dbc <_sbrk_r+0x1c>)
 8000da4:	2300      	movs	r3, #0
 8000da6:	4604      	mov	r4, r0
 8000da8:	4608      	mov	r0, r1
 8000daa:	602b      	str	r3, [r5, #0]
 8000dac:	f7ff fa9a 	bl	80002e4 <_sbrk>
 8000db0:	1c43      	adds	r3, r0, #1
 8000db2:	d102      	bne.n	8000dba <_sbrk_r+0x1a>
 8000db4:	682b      	ldr	r3, [r5, #0]
 8000db6:	b103      	cbz	r3, 8000dba <_sbrk_r+0x1a>
 8000db8:	6023      	str	r3, [r4, #0]
 8000dba:	bd38      	pop	{r3, r4, r5, pc}
 8000dbc:	20000090 	.word	0x20000090

08000dc0 <__sread>:
 8000dc0:	b510      	push	{r4, lr}
 8000dc2:	460c      	mov	r4, r1
 8000dc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000dc8:	f000 f8a0 	bl	8000f0c <_read_r>
 8000dcc:	2800      	cmp	r0, #0
 8000dce:	bfab      	itete	ge
 8000dd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000dd2:	89a3      	ldrhlt	r3, [r4, #12]
 8000dd4:	181b      	addge	r3, r3, r0
 8000dd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000dda:	bfac      	ite	ge
 8000ddc:	6563      	strge	r3, [r4, #84]	; 0x54
 8000dde:	81a3      	strhlt	r3, [r4, #12]
 8000de0:	bd10      	pop	{r4, pc}

08000de2 <__swrite>:
 8000de2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000de6:	461f      	mov	r7, r3
 8000de8:	898b      	ldrh	r3, [r1, #12]
 8000dea:	05db      	lsls	r3, r3, #23
 8000dec:	4605      	mov	r5, r0
 8000dee:	460c      	mov	r4, r1
 8000df0:	4616      	mov	r6, r2
 8000df2:	d505      	bpl.n	8000e00 <__swrite+0x1e>
 8000df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000df8:	2302      	movs	r3, #2
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f000 f868 	bl	8000ed0 <_lseek_r>
 8000e00:	89a3      	ldrh	r3, [r4, #12]
 8000e02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e0a:	81a3      	strh	r3, [r4, #12]
 8000e0c:	4632      	mov	r2, r6
 8000e0e:	463b      	mov	r3, r7
 8000e10:	4628      	mov	r0, r5
 8000e12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000e16:	f000 b817 	b.w	8000e48 <_write_r>

08000e1a <__sseek>:
 8000e1a:	b510      	push	{r4, lr}
 8000e1c:	460c      	mov	r4, r1
 8000e1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e22:	f000 f855 	bl	8000ed0 <_lseek_r>
 8000e26:	1c43      	adds	r3, r0, #1
 8000e28:	89a3      	ldrh	r3, [r4, #12]
 8000e2a:	bf15      	itete	ne
 8000e2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8000e2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000e32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000e36:	81a3      	strheq	r3, [r4, #12]
 8000e38:	bf18      	it	ne
 8000e3a:	81a3      	strhne	r3, [r4, #12]
 8000e3c:	bd10      	pop	{r4, pc}

08000e3e <__sclose>:
 8000e3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e42:	f000 b813 	b.w	8000e6c <_close_r>
	...

08000e48 <_write_r>:
 8000e48:	b538      	push	{r3, r4, r5, lr}
 8000e4a:	4d07      	ldr	r5, [pc, #28]	; (8000e68 <_write_r+0x20>)
 8000e4c:	4604      	mov	r4, r0
 8000e4e:	4608      	mov	r0, r1
 8000e50:	4611      	mov	r1, r2
 8000e52:	2200      	movs	r2, #0
 8000e54:	602a      	str	r2, [r5, #0]
 8000e56:	461a      	mov	r2, r3
 8000e58:	f7ff f9f3 	bl	8000242 <_write>
 8000e5c:	1c43      	adds	r3, r0, #1
 8000e5e:	d102      	bne.n	8000e66 <_write_r+0x1e>
 8000e60:	682b      	ldr	r3, [r5, #0]
 8000e62:	b103      	cbz	r3, 8000e66 <_write_r+0x1e>
 8000e64:	6023      	str	r3, [r4, #0]
 8000e66:	bd38      	pop	{r3, r4, r5, pc}
 8000e68:	20000090 	.word	0x20000090

08000e6c <_close_r>:
 8000e6c:	b538      	push	{r3, r4, r5, lr}
 8000e6e:	4d06      	ldr	r5, [pc, #24]	; (8000e88 <_close_r+0x1c>)
 8000e70:	2300      	movs	r3, #0
 8000e72:	4604      	mov	r4, r0
 8000e74:	4608      	mov	r0, r1
 8000e76:	602b      	str	r3, [r5, #0]
 8000e78:	f7ff f9ff 	bl	800027a <_close>
 8000e7c:	1c43      	adds	r3, r0, #1
 8000e7e:	d102      	bne.n	8000e86 <_close_r+0x1a>
 8000e80:	682b      	ldr	r3, [r5, #0]
 8000e82:	b103      	cbz	r3, 8000e86 <_close_r+0x1a>
 8000e84:	6023      	str	r3, [r4, #0]
 8000e86:	bd38      	pop	{r3, r4, r5, pc}
 8000e88:	20000090 	.word	0x20000090

08000e8c <_fstat_r>:
 8000e8c:	b538      	push	{r3, r4, r5, lr}
 8000e8e:	4d07      	ldr	r5, [pc, #28]	; (8000eac <_fstat_r+0x20>)
 8000e90:	2300      	movs	r3, #0
 8000e92:	4604      	mov	r4, r0
 8000e94:	4608      	mov	r0, r1
 8000e96:	4611      	mov	r1, r2
 8000e98:	602b      	str	r3, [r5, #0]
 8000e9a:	f7ff f9fa 	bl	8000292 <_fstat>
 8000e9e:	1c43      	adds	r3, r0, #1
 8000ea0:	d102      	bne.n	8000ea8 <_fstat_r+0x1c>
 8000ea2:	682b      	ldr	r3, [r5, #0]
 8000ea4:	b103      	cbz	r3, 8000ea8 <_fstat_r+0x1c>
 8000ea6:	6023      	str	r3, [r4, #0]
 8000ea8:	bd38      	pop	{r3, r4, r5, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000090 	.word	0x20000090

08000eb0 <_isatty_r>:
 8000eb0:	b538      	push	{r3, r4, r5, lr}
 8000eb2:	4d06      	ldr	r5, [pc, #24]	; (8000ecc <_isatty_r+0x1c>)
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	4608      	mov	r0, r1
 8000eba:	602b      	str	r3, [r5, #0]
 8000ebc:	f7ff f9f9 	bl	80002b2 <_isatty>
 8000ec0:	1c43      	adds	r3, r0, #1
 8000ec2:	d102      	bne.n	8000eca <_isatty_r+0x1a>
 8000ec4:	682b      	ldr	r3, [r5, #0]
 8000ec6:	b103      	cbz	r3, 8000eca <_isatty_r+0x1a>
 8000ec8:	6023      	str	r3, [r4, #0]
 8000eca:	bd38      	pop	{r3, r4, r5, pc}
 8000ecc:	20000090 	.word	0x20000090

08000ed0 <_lseek_r>:
 8000ed0:	b538      	push	{r3, r4, r5, lr}
 8000ed2:	4d07      	ldr	r5, [pc, #28]	; (8000ef0 <_lseek_r+0x20>)
 8000ed4:	4604      	mov	r4, r0
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	4611      	mov	r1, r2
 8000eda:	2200      	movs	r2, #0
 8000edc:	602a      	str	r2, [r5, #0]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	f7ff f9f2 	bl	80002c8 <_lseek>
 8000ee4:	1c43      	adds	r3, r0, #1
 8000ee6:	d102      	bne.n	8000eee <_lseek_r+0x1e>
 8000ee8:	682b      	ldr	r3, [r5, #0]
 8000eea:	b103      	cbz	r3, 8000eee <_lseek_r+0x1e>
 8000eec:	6023      	str	r3, [r4, #0]
 8000eee:	bd38      	pop	{r3, r4, r5, pc}
 8000ef0:	20000090 	.word	0x20000090

08000ef4 <__malloc_lock>:
 8000ef4:	4801      	ldr	r0, [pc, #4]	; (8000efc <__malloc_lock+0x8>)
 8000ef6:	f7ff be0b 	b.w	8000b10 <__retarget_lock_acquire_recursive>
 8000efa:	bf00      	nop
 8000efc:	20000084 	.word	0x20000084

08000f00 <__malloc_unlock>:
 8000f00:	4801      	ldr	r0, [pc, #4]	; (8000f08 <__malloc_unlock+0x8>)
 8000f02:	f7ff be06 	b.w	8000b12 <__retarget_lock_release_recursive>
 8000f06:	bf00      	nop
 8000f08:	20000084 	.word	0x20000084

08000f0c <_read_r>:
 8000f0c:	b538      	push	{r3, r4, r5, lr}
 8000f0e:	4d07      	ldr	r5, [pc, #28]	; (8000f2c <_read_r+0x20>)
 8000f10:	4604      	mov	r4, r0
 8000f12:	4608      	mov	r0, r1
 8000f14:	4611      	mov	r1, r2
 8000f16:	2200      	movs	r2, #0
 8000f18:	602a      	str	r2, [r5, #0]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	f7ff f974 	bl	8000208 <_read>
 8000f20:	1c43      	adds	r3, r0, #1
 8000f22:	d102      	bne.n	8000f2a <_read_r+0x1e>
 8000f24:	682b      	ldr	r3, [r5, #0]
 8000f26:	b103      	cbz	r3, 8000f2a <_read_r+0x1e>
 8000f28:	6023      	str	r3, [r4, #0]
 8000f2a:	bd38      	pop	{r3, r4, r5, pc}
 8000f2c:	20000090 	.word	0x20000090

08000f30 <_init>:
 8000f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f32:	bf00      	nop
 8000f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f36:	bc08      	pop	{r3}
 8000f38:	469e      	mov	lr, r3
 8000f3a:	4770      	bx	lr

08000f3c <_fini>:
 8000f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f3e:	bf00      	nop
 8000f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f42:	bc08      	pop	{r3}
 8000f44:	469e      	mov	lr, r3
 8000f46:	4770      	bx	lr
