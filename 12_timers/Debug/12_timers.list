
12_timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001f8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000390  08000398  00010398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000390  08000390  00010398  2**0
                  CONTENTS
  4 .ARM          00000000  08000390  08000390  00010398  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000390  08000398  00010398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000390  08000390  00010390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000394  08000394  00010394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000398  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000398  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010398  2**0
                  CONTENTS, READONLY
 12 .debug_info   000009aa  00000000  00000000  000103c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000270  00000000  00000000  00010d72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000088  00000000  00000000  00010fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000050  00000000  00000000  00011070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000002e1  00000000  00000000  000110c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000f3d  00000000  00000000  000113a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004fb8e  00000000  00000000  000122de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00061e6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000c0  00000000  00000000  00061ebc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000378 	.word	0x08000378

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000378 	.word	0x08000378

080001d8 <main>:
#include "tim.h"
#define GPIODEN		(1U<<3)
#define PIN13_LED	(1U<<13)

int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIODEN;
 80001dc:	4b17      	ldr	r3, [pc, #92]	; (800023c <main+0x64>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e0:	4a16      	ldr	r2, [pc, #88]	; (800023c <main+0x64>)
 80001e2:	f043 0308 	orr.w	r3, r3, #8
 80001e6:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOD->MODER |= (1U<<26);
 80001e8:	4b15      	ldr	r3, [pc, #84]	; (8000240 <main+0x68>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a14      	ldr	r2, [pc, #80]	; (8000240 <main+0x68>)
 80001ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80001f2:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &=~ (1U<<27);
 80001f4:	4b12      	ldr	r3, [pc, #72]	; (8000240 <main+0x68>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a11      	ldr	r2, [pc, #68]	; (8000240 <main+0x68>)
 80001fa:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80001fe:	6013      	str	r3, [r2, #0]
	tim2_1hz_init();
 8000200:	f000 f84a 	bl	8000298 <tim2_1hz_init>
	while (1)
	{
		//wait for UIF (UPDATE INTERRUPT FLAG)
		while (TIM2->SR & SR_UIF);
 8000204:	bf00      	nop
 8000206:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800020a:	691b      	ldr	r3, [r3, #16]
 800020c:	f003 0301 	and.w	r3, r3, #1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d1f8      	bne.n	8000206 <main+0x2e>
		//Clear UIF
		TIM2->SR &=~ SR_UIF;
 8000214:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000218:	691b      	ldr	r3, [r3, #16]
 800021a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800021e:	f023 0301 	bic.w	r3, r3, #1
 8000222:	6113      	str	r3, [r2, #16]
		GPIOD->ODR ^= PIN13_LED;
 8000224:	4b06      	ldr	r3, [pc, #24]	; (8000240 <main+0x68>)
 8000226:	695b      	ldr	r3, [r3, #20]
 8000228:	4a05      	ldr	r2, [pc, #20]	; (8000240 <main+0x68>)
 800022a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800022e:	6153      	str	r3, [r2, #20]
		systickDelayms(1000);
 8000230:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000234:	f000 f806 	bl	8000244 <systickDelayms>
		while (TIM2->SR & SR_UIF);
 8000238:	e7e4      	b.n	8000204 <main+0x2c>
 800023a:	bf00      	nop
 800023c:	40023800 	.word	0x40023800
 8000240:	40020c00 	.word	0x40020c00

08000244 <systickDelayms>:
#define CTRL_CLKSRC				(1U<<2)
#define CTRL_COUNTFLAG			(1U<<16)


void systickDelayms(int time)
{
 8000244:	b480      	push	{r7}
 8000246:	b085      	sub	sp, #20
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
	//Config Systick
	SysTick->LOAD = SYSTICK_LOAD_VAL;
 800024c:	4b11      	ldr	r3, [pc, #68]	; (8000294 <systickDelayms+0x50>)
 800024e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000252:	605a      	str	r2, [r3, #4]

	//Clear systick current value register
	SysTick->VAL = 0;
 8000254:	4b0f      	ldr	r3, [pc, #60]	; (8000294 <systickDelayms+0x50>)
 8000256:	2200      	movs	r2, #0
 8000258:	609a      	str	r2, [r3, #8]
	//Enable systick and select internal clk src
	SysTick->CTRL = CTRL_ENABLE|CTRL_CLKSRC;
 800025a:	4b0e      	ldr	r3, [pc, #56]	; (8000294 <systickDelayms+0x50>)
 800025c:	2205      	movs	r2, #5
 800025e:	601a      	str	r2, [r3, #0]

	for (int i=0; i < time; i++)
 8000260:	2300      	movs	r3, #0
 8000262:	60fb      	str	r3, [r7, #12]
 8000264:	e009      	b.n	800027a <systickDelayms+0x36>
	{
		//Wait until the COUNTERFLAG is set
		while ((SysTick->CTRL & CTRL_COUNTFLAG) ==0);
 8000266:	bf00      	nop
 8000268:	4b0a      	ldr	r3, [pc, #40]	; (8000294 <systickDelayms+0x50>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000270:	2b00      	cmp	r3, #0
 8000272:	d0f9      	beq.n	8000268 <systickDelayms+0x24>
	for (int i=0; i < time; i++)
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	3301      	adds	r3, #1
 8000278:	60fb      	str	r3, [r7, #12]
 800027a:	68fa      	ldr	r2, [r7, #12]
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	429a      	cmp	r2, r3
 8000280:	dbf1      	blt.n	8000266 <systickDelayms+0x22>

	}
	SysTick->CTRL = 0;
 8000282:	4b04      	ldr	r3, [pc, #16]	; (8000294 <systickDelayms+0x50>)
 8000284:	2200      	movs	r2, #0
 8000286:	601a      	str	r2, [r3, #0]
} ;
 8000288:	bf00      	nop
 800028a:	3714      	adds	r7, #20
 800028c:	46bd      	mov	sp, r7
 800028e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000292:	4770      	bx	lr
 8000294:	e000e010 	.word	0xe000e010

08000298 <tim2_1hz_init>:
#include "tim.h"
#define TIME2EN		(1U<<0)
#define CR1_CEN		(1U<<0)

void tim2_1hz_init(void)
{
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
	//Enable clock access to tim2
	RCC->AHB1ENR |= TIME2EN;
 800029c:	4b0e      	ldr	r3, [pc, #56]	; (80002d8 <tim2_1hz_init+0x40>)
 800029e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a0:	4a0d      	ldr	r2, [pc, #52]	; (80002d8 <tim2_1hz_init+0x40>)
 80002a2:	f043 0301 	orr.w	r3, r3, #1
 80002a6:	6313      	str	r3, [r2, #48]	; 0x30

	//Set prescaler value (PRESCALER)
	TIM2->PSC = 1600 - 1;//16MHz/1600 = 10kHz
 80002a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002ac:	f240 623f 	movw	r2, #1599	; 0x63f
 80002b0:	629a      	str	r2, [r3, #40]	; 0x28

	//Set auto-reload value (AUTO RELOAD REG)
	TIM2->ARR = 10000 - 1;//10000/10000 = 1
 80002b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002b6:	f242 720f 	movw	r2, #9999	; 0x270f
 80002ba:	62da      	str	r2, [r3, #44]	; 0x2c

	//CLear counter (COUNTER)
	TIM2->CNT = 0;
 80002bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002c0:	2200      	movs	r2, #0
 80002c2:	625a      	str	r2, [r3, #36]	; 0x24
	//Enable timer (CONTROL REGISTER)
	TIM2->CR1 = CR1_CEN;
 80002c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002c8:	2201      	movs	r2, #1
 80002ca:	601a      	str	r2, [r3, #0]
}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	40023800 	.word	0x40023800

080002dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002dc:	480d      	ldr	r0, [pc, #52]	; (8000314 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002e0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002e4:	480c      	ldr	r0, [pc, #48]	; (8000318 <LoopForever+0x6>)
  ldr r1, =_edata
 80002e6:	490d      	ldr	r1, [pc, #52]	; (800031c <LoopForever+0xa>)
  ldr r2, =_sidata
 80002e8:	4a0d      	ldr	r2, [pc, #52]	; (8000320 <LoopForever+0xe>)
  movs r3, #0
 80002ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002ec:	e002      	b.n	80002f4 <LoopCopyDataInit>

080002ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002f2:	3304      	adds	r3, #4

080002f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002f8:	d3f9      	bcc.n	80002ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002fa:	4a0a      	ldr	r2, [pc, #40]	; (8000324 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002fc:	4c0a      	ldr	r4, [pc, #40]	; (8000328 <LoopForever+0x16>)
  movs r3, #0
 80002fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000300:	e001      	b.n	8000306 <LoopFillZerobss>

08000302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000304:	3204      	adds	r2, #4

08000306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000308:	d3fb      	bcc.n	8000302 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800030a:	f000 f811 	bl	8000330 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800030e:	f7ff ff63 	bl	80001d8 <main>

08000312 <LoopForever>:

LoopForever:
  b LoopForever
 8000312:	e7fe      	b.n	8000312 <LoopForever>
  ldr   r0, =_estack
 8000314:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000318:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800031c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000320:	08000398 	.word	0x08000398
  ldr r2, =_sbss
 8000324:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000328:	2000001c 	.word	0x2000001c

0800032c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800032c:	e7fe      	b.n	800032c <ADC_IRQHandler>
	...

08000330 <__libc_init_array>:
 8000330:	b570      	push	{r4, r5, r6, lr}
 8000332:	4d0d      	ldr	r5, [pc, #52]	; (8000368 <__libc_init_array+0x38>)
 8000334:	4c0d      	ldr	r4, [pc, #52]	; (800036c <__libc_init_array+0x3c>)
 8000336:	1b64      	subs	r4, r4, r5
 8000338:	10a4      	asrs	r4, r4, #2
 800033a:	2600      	movs	r6, #0
 800033c:	42a6      	cmp	r6, r4
 800033e:	d109      	bne.n	8000354 <__libc_init_array+0x24>
 8000340:	4d0b      	ldr	r5, [pc, #44]	; (8000370 <__libc_init_array+0x40>)
 8000342:	4c0c      	ldr	r4, [pc, #48]	; (8000374 <__libc_init_array+0x44>)
 8000344:	f000 f818 	bl	8000378 <_init>
 8000348:	1b64      	subs	r4, r4, r5
 800034a:	10a4      	asrs	r4, r4, #2
 800034c:	2600      	movs	r6, #0
 800034e:	42a6      	cmp	r6, r4
 8000350:	d105      	bne.n	800035e <__libc_init_array+0x2e>
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f855 3b04 	ldr.w	r3, [r5], #4
 8000358:	4798      	blx	r3
 800035a:	3601      	adds	r6, #1
 800035c:	e7ee      	b.n	800033c <__libc_init_array+0xc>
 800035e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000362:	4798      	blx	r3
 8000364:	3601      	adds	r6, #1
 8000366:	e7f2      	b.n	800034e <__libc_init_array+0x1e>
 8000368:	08000390 	.word	0x08000390
 800036c:	08000390 	.word	0x08000390
 8000370:	08000390 	.word	0x08000390
 8000374:	08000394 	.word	0x08000394

08000378 <_init>:
 8000378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800037a:	bf00      	nop
 800037c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800037e:	bc08      	pop	{r3}
 8000380:	469e      	mov	lr, r3
 8000382:	4770      	bx	lr

08000384 <_fini>:
 8000384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000386:	bf00      	nop
 8000388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800038a:	bc08      	pop	{r3}
 800038c:	469e      	mov	lr, r3
 800038e:	4770      	bx	lr
