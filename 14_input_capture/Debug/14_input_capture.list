
14_input_capture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000218  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003b0  080003b8  000103b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003b0  080003b0  000103b8  2**0
                  CONTENTS
  4 .ARM          00000000  080003b0  080003b0  000103b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003b0  080003b8  000103b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003b0  080003b0  000103b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003b4  080003b4  000103b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080003b8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080003b8  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000103b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000006c4  00000000  00000000  000103e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000186  00000000  00000000  00010aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  00010c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000050  00000000  00000000  00010cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000023c  00000000  00000000  00010d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000ab7  00000000  00000000  00010f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004fbe1  00000000  00000000  000119f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000615d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000c8  00000000  00000000  00061624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000398 	.word	0x08000398

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000398 	.word	0x08000398

080001d8 <main>:
#define PIN13_LED	(1U<<13)

int timestamp = 0;
//connect a bus wire from PD15 to PA6
int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	tim4_pd15_output_compare();
 80001dc:	f000 f814 	bl	8000208 <tim4_pd15_output_compare>
	tim3_pa6_input_capture();
 80001e0:	f000 f856 	bl	8000290 <tim3_pa6_input_capture>
	while (1)
	{
		//Wait until edge is capture
		while (!(TIM3->SR & SR_CC1IF))
 80001e4:	bf00      	nop
 80001e6:	4b06      	ldr	r3, [pc, #24]	; (8000200 <main+0x28>)
 80001e8:	691b      	ldr	r3, [r3, #16]
 80001ea:	f003 0302 	and.w	r3, r3, #2
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d0f9      	beq.n	80001e6 <main+0xe>
		{

		}
		//Read Value
		timestamp = TIM3->CCR1;
 80001f2:	4b03      	ldr	r3, [pc, #12]	; (8000200 <main+0x28>)
 80001f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80001f6:	461a      	mov	r2, r3
 80001f8:	4b02      	ldr	r3, [pc, #8]	; (8000204 <main+0x2c>)
 80001fa:	601a      	str	r2, [r3, #0]
		while (!(TIM3->SR & SR_CC1IF))
 80001fc:	e7f2      	b.n	80001e4 <main+0xc>
 80001fe:	bf00      	nop
 8000200:	40000400 	.word	0x40000400
 8000204:	2000001c 	.word	0x2000001c

08000208 <tim4_pd15_output_compare>:
	TIM4->CNT = 0;
	//Enable timer
	TIM4->CR1 = CR1_CEN;
}
void tim4_pd15_output_compare(void)
{
 8000208:	b480      	push	{r7}
 800020a:	af00      	add	r7, sp, #0
	//Enable clock access to GPIOA
	RCC->AHB1ENR |= GPIODEN;
 800020c:	4b1d      	ldr	r3, [pc, #116]	; (8000284 <tim4_pd15_output_compare+0x7c>)
 800020e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000210:	4a1c      	ldr	r2, [pc, #112]	; (8000284 <tim4_pd15_output_compare+0x7c>)
 8000212:	f043 0308 	orr.w	r3, r3, #8
 8000216:	6313      	str	r3, [r2, #48]	; 0x30

	//Set PD15 mode to alternate function
	GPIOD->MODER &= ~(1U<<30);
 8000218:	4b1b      	ldr	r3, [pc, #108]	; (8000288 <tim4_pd15_output_compare+0x80>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a1a      	ldr	r2, [pc, #104]	; (8000288 <tim4_pd15_output_compare+0x80>)
 800021e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000222:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= (1U<<31);
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <tim4_pd15_output_compare+0x80>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a17      	ldr	r2, [pc, #92]	; (8000288 <tim4_pd15_output_compare+0x80>)
 800022a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800022e:	6013      	str	r3, [r2, #0]
	//Set PD15 alternate function type to TIM2_CH1 (AF01)
	GPIOD->AFR[1] |= AFR15_TIM;
 8000230:	4b15      	ldr	r3, [pc, #84]	; (8000288 <tim4_pd15_output_compare+0x80>)
 8000232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000234:	4a14      	ldr	r2, [pc, #80]	; (8000288 <tim4_pd15_output_compare+0x80>)
 8000236:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800023a:	6253      	str	r3, [r2, #36]	; 0x24

	//Enable clock access to tim4
	RCC->APB1ENR |= TIM4EN;
 800023c:	4b11      	ldr	r3, [pc, #68]	; (8000284 <tim4_pd15_output_compare+0x7c>)
 800023e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000240:	4a10      	ldr	r2, [pc, #64]	; (8000284 <tim4_pd15_output_compare+0x7c>)
 8000242:	f043 0304 	orr.w	r3, r3, #4
 8000246:	6413      	str	r3, [r2, #64]	; 0x40

	//Set prescalder value
	TIM4->PSC = 1600 - 1;//16MHz/1600 = 10kHz
 8000248:	4b10      	ldr	r3, [pc, #64]	; (800028c <tim4_pd15_output_compare+0x84>)
 800024a:	f240 623f 	movw	r2, #1599	; 0x63f
 800024e:	629a      	str	r2, [r3, #40]	; 0x28

	//Set auto-reload value
	TIM4->ARR = 10000 - 1;//10000/10000 = 1
 8000250:	4b0e      	ldr	r3, [pc, #56]	; (800028c <tim4_pd15_output_compare+0x84>)
 8000252:	f242 720f 	movw	r2, #9999	; 0x270f
 8000256:	62da      	str	r2, [r3, #44]	; 0x2c
	//Set output compare toggle mode
	//CAPTURE COMPARE MODE REG
	TIM4->CCMR2 = OC_TOGGLE;
 8000258:	4b0c      	ldr	r3, [pc, #48]	; (800028c <tim4_pd15_output_compare+0x84>)
 800025a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800025e:	61da      	str	r2, [r3, #28]
	//CAPTURE/COMPARE ENABLE REG
    //Enable tim4 ch4 in compare mode
	TIM4->CCER |= CCER_CC4E;
 8000260:	4b0a      	ldr	r3, [pc, #40]	; (800028c <tim4_pd15_output_compare+0x84>)
 8000262:	6a1b      	ldr	r3, [r3, #32]
 8000264:	4a09      	ldr	r2, [pc, #36]	; (800028c <tim4_pd15_output_compare+0x84>)
 8000266:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800026a:	6213      	str	r3, [r2, #32]
	//CLear counter
	TIM4->CNT = 0;
 800026c:	4b07      	ldr	r3, [pc, #28]	; (800028c <tim4_pd15_output_compare+0x84>)
 800026e:	2200      	movs	r2, #0
 8000270:	625a      	str	r2, [r3, #36]	; 0x24
	//Enable timer
	TIM4->CR1 = CR1_CEN;
 8000272:	4b06      	ldr	r3, [pc, #24]	; (800028c <tim4_pd15_output_compare+0x84>)
 8000274:	2201      	movs	r2, #1
 8000276:	601a      	str	r2, [r3, #0]
}
 8000278:	bf00      	nop
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	40023800 	.word	0x40023800
 8000288:	40020c00 	.word	0x40020c00
 800028c:	40000800 	.word	0x40000800

08000290 <tim3_pa6_input_capture>:
void tim3_pa6_input_capture(void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
	//TIM3_CH1: PA6
	//Set enable clock access to GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 8000294:	4b16      	ldr	r3, [pc, #88]	; (80002f0 <tim3_pa6_input_capture+0x60>)
 8000296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000298:	4a15      	ldr	r2, [pc, #84]	; (80002f0 <tim3_pa6_input_capture+0x60>)
 800029a:	f043 0301 	orr.w	r3, r3, #1
 800029e:	6313      	str	r3, [r2, #48]	; 0x30
	//Set PA6 mode to alternate fuction
	GPIOA->MODER &=~ (1U<<12);
 80002a0:	4b14      	ldr	r3, [pc, #80]	; (80002f4 <tim3_pa6_input_capture+0x64>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a13      	ldr	r2, [pc, #76]	; (80002f4 <tim3_pa6_input_capture+0x64>)
 80002a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80002aa:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<13);
 80002ac:	4b11      	ldr	r3, [pc, #68]	; (80002f4 <tim3_pa6_input_capture+0x64>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a10      	ldr	r2, [pc, #64]	; (80002f4 <tim3_pa6_input_capture+0x64>)
 80002b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002b6:	6013      	str	r3, [r2, #0]
	//Set PA6 alternate functtion type to TIM3_CH1 (AF02)
	GPIOA->AFR[0] = AFR6_TIM;
 80002b8:	4b0e      	ldr	r3, [pc, #56]	; (80002f4 <tim3_pa6_input_capture+0x64>)
 80002ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80002be:	621a      	str	r2, [r3, #32]
	//Enable clock access to tim3
	RCC->APB1ENR |= TIM3EN;
 80002c0:	4b0b      	ldr	r3, [pc, #44]	; (80002f0 <tim3_pa6_input_capture+0x60>)
 80002c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002c4:	4a0a      	ldr	r2, [pc, #40]	; (80002f0 <tim3_pa6_input_capture+0x60>)
 80002c6:	f043 0302 	orr.w	r3, r3, #2
 80002ca:	6413      	str	r3, [r2, #64]	; 0x40
	//Set prescaler
	TIM3->PSC = 16000 - 1; //16000000/16000
 80002cc:	4b0a      	ldr	r3, [pc, #40]	; (80002f8 <tim3_pa6_input_capture+0x68>)
 80002ce:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80002d2:	629a      	str	r2, [r3, #40]	; 0x28
	//Set CH1 to input capture
	TIM3->CCMR1 = CCER_CC1S;
 80002d4:	4b08      	ldr	r3, [pc, #32]	; (80002f8 <tim3_pa6_input_capture+0x68>)
 80002d6:	2201      	movs	r2, #1
 80002d8:	619a      	str	r2, [r3, #24]
	//Set CH1 to capture rising edge
	TIM3->CCER = CCER_CC1E;
 80002da:	4b07      	ldr	r3, [pc, #28]	; (80002f8 <tim3_pa6_input_capture+0x68>)
 80002dc:	2201      	movs	r2, #1
 80002de:	621a      	str	r2, [r3, #32]
	//Enable TIM3
	TIM3->CR1 = CR1_CEN;
 80002e0:	4b05      	ldr	r3, [pc, #20]	; (80002f8 <tim3_pa6_input_capture+0x68>)
 80002e2:	2201      	movs	r2, #1
 80002e4:	601a      	str	r2, [r3, #0]
}
 80002e6:	bf00      	nop
 80002e8:	46bd      	mov	sp, r7
 80002ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ee:	4770      	bx	lr
 80002f0:	40023800 	.word	0x40023800
 80002f4:	40020000 	.word	0x40020000
 80002f8:	40000400 	.word	0x40000400

080002fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002fc:	480d      	ldr	r0, [pc, #52]	; (8000334 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002fe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000300:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000304:	480c      	ldr	r0, [pc, #48]	; (8000338 <LoopForever+0x6>)
  ldr r1, =_edata
 8000306:	490d      	ldr	r1, [pc, #52]	; (800033c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000308:	4a0d      	ldr	r2, [pc, #52]	; (8000340 <LoopForever+0xe>)
  movs r3, #0
 800030a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800030c:	e002      	b.n	8000314 <LoopCopyDataInit>

0800030e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800030e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000312:	3304      	adds	r3, #4

08000314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000318:	d3f9      	bcc.n	800030e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800031a:	4a0a      	ldr	r2, [pc, #40]	; (8000344 <LoopForever+0x12>)
  ldr r4, =_ebss
 800031c:	4c0a      	ldr	r4, [pc, #40]	; (8000348 <LoopForever+0x16>)
  movs r3, #0
 800031e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000320:	e001      	b.n	8000326 <LoopFillZerobss>

08000322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000324:	3204      	adds	r2, #4

08000326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000328:	d3fb      	bcc.n	8000322 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800032a:	f000 f811 	bl	8000350 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800032e:	f7ff ff53 	bl	80001d8 <main>

08000332 <LoopForever>:

LoopForever:
  b LoopForever
 8000332:	e7fe      	b.n	8000332 <LoopForever>
  ldr   r0, =_estack
 8000334:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000338:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800033c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000340:	080003b8 	.word	0x080003b8
  ldr r2, =_sbss
 8000344:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000348:	20000020 	.word	0x20000020

0800034c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800034c:	e7fe      	b.n	800034c <ADC_IRQHandler>
	...

08000350 <__libc_init_array>:
 8000350:	b570      	push	{r4, r5, r6, lr}
 8000352:	4d0d      	ldr	r5, [pc, #52]	; (8000388 <__libc_init_array+0x38>)
 8000354:	4c0d      	ldr	r4, [pc, #52]	; (800038c <__libc_init_array+0x3c>)
 8000356:	1b64      	subs	r4, r4, r5
 8000358:	10a4      	asrs	r4, r4, #2
 800035a:	2600      	movs	r6, #0
 800035c:	42a6      	cmp	r6, r4
 800035e:	d109      	bne.n	8000374 <__libc_init_array+0x24>
 8000360:	4d0b      	ldr	r5, [pc, #44]	; (8000390 <__libc_init_array+0x40>)
 8000362:	4c0c      	ldr	r4, [pc, #48]	; (8000394 <__libc_init_array+0x44>)
 8000364:	f000 f818 	bl	8000398 <_init>
 8000368:	1b64      	subs	r4, r4, r5
 800036a:	10a4      	asrs	r4, r4, #2
 800036c:	2600      	movs	r6, #0
 800036e:	42a6      	cmp	r6, r4
 8000370:	d105      	bne.n	800037e <__libc_init_array+0x2e>
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f855 3b04 	ldr.w	r3, [r5], #4
 8000378:	4798      	blx	r3
 800037a:	3601      	adds	r6, #1
 800037c:	e7ee      	b.n	800035c <__libc_init_array+0xc>
 800037e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000382:	4798      	blx	r3
 8000384:	3601      	adds	r6, #1
 8000386:	e7f2      	b.n	800036e <__libc_init_array+0x1e>
 8000388:	080003b0 	.word	0x080003b0
 800038c:	080003b0 	.word	0x080003b0
 8000390:	080003b0 	.word	0x080003b0
 8000394:	080003b4 	.word	0x080003b4

08000398 <_init>:
 8000398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800039a:	bf00      	nop
 800039c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800039e:	bc08      	pop	{r3}
 80003a0:	469e      	mov	lr, r3
 80003a2:	4770      	bx	lr

080003a4 <_fini>:
 80003a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003a6:	bf00      	nop
 80003a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003aa:	bc08      	pop	{r3}
 80003ac:	469e      	mov	lr, r3
 80003ae:	4770      	bx	lr
