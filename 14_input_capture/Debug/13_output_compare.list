
13_output_compare.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000188  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000320  08000328  00010328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000320  08000320  00010328  2**0
                  CONTENTS
  4 .ARM          00000000  08000320  08000320  00010328  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000320  08000328  00010328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000320  08000320  00010320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000324  08000324  00010324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000328  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000328  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010328  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000053f  00000000  00000000  00010358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000011d  00000000  00000000  00010897  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000070  00000000  00000000  000109b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000048  00000000  00000000  00010a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000209  00000000  00000000  00010a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000a5f  00000000  00000000  00010c79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004fb5b  00000000  00000000  000116d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00061233  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000a8  00000000  00000000  00061284  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000308 	.word	0x08000308

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000308 	.word	0x08000308

080001d8 <main>:
#include "tim.h"
#define GPIODEN		(1U<<3)
#define PIN13_LED	(1U<<13)

int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	tim4_pd15_output_compare();
 80001dc:	f000 f802 	bl	80001e4 <tim4_pd15_output_compare>
	while (1)
 80001e0:	e7fe      	b.n	80001e0 <main+0x8>
	...

080001e4 <tim4_pd15_output_compare>:
	TIM4->CNT = 0;
	//Enable timer
	TIM4->CR1 = CR1_CEN;
}
void tim4_pd15_output_compare(void)
{
 80001e4:	b480      	push	{r7}
 80001e6:	af00      	add	r7, sp, #0
	//Enable clock access to GPIOA
	RCC->AHB1ENR |= GPIODEN;
 80001e8:	4b1d      	ldr	r3, [pc, #116]	; (8000260 <tim4_pd15_output_compare+0x7c>)
 80001ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001ec:	4a1c      	ldr	r2, [pc, #112]	; (8000260 <tim4_pd15_output_compare+0x7c>)
 80001ee:	f043 0308 	orr.w	r3, r3, #8
 80001f2:	6313      	str	r3, [r2, #48]	; 0x30

	//Set PD15 mode to alternate function
	GPIOD->MODER &= ~(1U<<30);
 80001f4:	4b1b      	ldr	r3, [pc, #108]	; (8000264 <tim4_pd15_output_compare+0x80>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a1a      	ldr	r2, [pc, #104]	; (8000264 <tim4_pd15_output_compare+0x80>)
 80001fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80001fe:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= (1U<<31);
 8000200:	4b18      	ldr	r3, [pc, #96]	; (8000264 <tim4_pd15_output_compare+0x80>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a17      	ldr	r2, [pc, #92]	; (8000264 <tim4_pd15_output_compare+0x80>)
 8000206:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800020a:	6013      	str	r3, [r2, #0]
	//Set PD15 alternate function type to TIM2_CH1 (AF01)
	GPIOD->AFR[1] |= AFR15_TIM;
 800020c:	4b15      	ldr	r3, [pc, #84]	; (8000264 <tim4_pd15_output_compare+0x80>)
 800020e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000210:	4a14      	ldr	r2, [pc, #80]	; (8000264 <tim4_pd15_output_compare+0x80>)
 8000212:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000216:	6253      	str	r3, [r2, #36]	; 0x24

	//Enable clock access to tim4
	RCC->APB1ENR |= TIM4EN;
 8000218:	4b11      	ldr	r3, [pc, #68]	; (8000260 <tim4_pd15_output_compare+0x7c>)
 800021a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800021c:	4a10      	ldr	r2, [pc, #64]	; (8000260 <tim4_pd15_output_compare+0x7c>)
 800021e:	f043 0304 	orr.w	r3, r3, #4
 8000222:	6413      	str	r3, [r2, #64]	; 0x40

	//Set prescalder value
	TIM4->PSC = 1600 - 1;//16MHz/1600 = 10kHz
 8000224:	4b10      	ldr	r3, [pc, #64]	; (8000268 <tim4_pd15_output_compare+0x84>)
 8000226:	f240 623f 	movw	r2, #1599	; 0x63f
 800022a:	629a      	str	r2, [r3, #40]	; 0x28

	//Set auto-reload value
	TIM4->ARR = 10000 - 1;//10000/10000 = 1
 800022c:	4b0e      	ldr	r3, [pc, #56]	; (8000268 <tim4_pd15_output_compare+0x84>)
 800022e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000232:	62da      	str	r2, [r3, #44]	; 0x2c
	//Set output compare toggle mode
	//CAPTURE COMPARE MODE REG
	TIM4->CCMR2 = OC_TOGGLE;
 8000234:	4b0c      	ldr	r3, [pc, #48]	; (8000268 <tim4_pd15_output_compare+0x84>)
 8000236:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800023a:	61da      	str	r2, [r3, #28]
	//CAPTURE/COMPARE ENABLE REG
    //Enable tim4 ch4 in compare mode
	TIM4->CCER |= CCER_CC4E;
 800023c:	4b0a      	ldr	r3, [pc, #40]	; (8000268 <tim4_pd15_output_compare+0x84>)
 800023e:	6a1b      	ldr	r3, [r3, #32]
 8000240:	4a09      	ldr	r2, [pc, #36]	; (8000268 <tim4_pd15_output_compare+0x84>)
 8000242:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000246:	6213      	str	r3, [r2, #32]
	//CLear counter
	TIM4->CNT = 0;
 8000248:	4b07      	ldr	r3, [pc, #28]	; (8000268 <tim4_pd15_output_compare+0x84>)
 800024a:	2200      	movs	r2, #0
 800024c:	625a      	str	r2, [r3, #36]	; 0x24
	//Enable timer
	TIM4->CR1 = CR1_CEN;
 800024e:	4b06      	ldr	r3, [pc, #24]	; (8000268 <tim4_pd15_output_compare+0x84>)
 8000250:	2201      	movs	r2, #1
 8000252:	601a      	str	r2, [r3, #0]
}
 8000254:	bf00      	nop
 8000256:	46bd      	mov	sp, r7
 8000258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	40023800 	.word	0x40023800
 8000264:	40020c00 	.word	0x40020c00
 8000268:	40000800 	.word	0x40000800

0800026c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800026c:	480d      	ldr	r0, [pc, #52]	; (80002a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800026e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000270:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000274:	480c      	ldr	r0, [pc, #48]	; (80002a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000276:	490d      	ldr	r1, [pc, #52]	; (80002ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000278:	4a0d      	ldr	r2, [pc, #52]	; (80002b0 <LoopForever+0xe>)
  movs r3, #0
 800027a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800027c:	e002      	b.n	8000284 <LoopCopyDataInit>

0800027e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800027e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000280:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000282:	3304      	adds	r3, #4

08000284 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000284:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000286:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000288:	d3f9      	bcc.n	800027e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800028a:	4a0a      	ldr	r2, [pc, #40]	; (80002b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800028c:	4c0a      	ldr	r4, [pc, #40]	; (80002b8 <LoopForever+0x16>)
  movs r3, #0
 800028e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000290:	e001      	b.n	8000296 <LoopFillZerobss>

08000292 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000292:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000294:	3204      	adds	r2, #4

08000296 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000296:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000298:	d3fb      	bcc.n	8000292 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800029a:	f000 f811 	bl	80002c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800029e:	f7ff ff9b 	bl	80001d8 <main>

080002a2 <LoopForever>:

LoopForever:
  b LoopForever
 80002a2:	e7fe      	b.n	80002a2 <LoopForever>
  ldr   r0, =_estack
 80002a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002ac:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002b0:	08000328 	.word	0x08000328
  ldr r2, =_sbss
 80002b4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002b8:	2000001c 	.word	0x2000001c

080002bc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002bc:	e7fe      	b.n	80002bc <ADC_IRQHandler>
	...

080002c0 <__libc_init_array>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	4d0d      	ldr	r5, [pc, #52]	; (80002f8 <__libc_init_array+0x38>)
 80002c4:	4c0d      	ldr	r4, [pc, #52]	; (80002fc <__libc_init_array+0x3c>)
 80002c6:	1b64      	subs	r4, r4, r5
 80002c8:	10a4      	asrs	r4, r4, #2
 80002ca:	2600      	movs	r6, #0
 80002cc:	42a6      	cmp	r6, r4
 80002ce:	d109      	bne.n	80002e4 <__libc_init_array+0x24>
 80002d0:	4d0b      	ldr	r5, [pc, #44]	; (8000300 <__libc_init_array+0x40>)
 80002d2:	4c0c      	ldr	r4, [pc, #48]	; (8000304 <__libc_init_array+0x44>)
 80002d4:	f000 f818 	bl	8000308 <_init>
 80002d8:	1b64      	subs	r4, r4, r5
 80002da:	10a4      	asrs	r4, r4, #2
 80002dc:	2600      	movs	r6, #0
 80002de:	42a6      	cmp	r6, r4
 80002e0:	d105      	bne.n	80002ee <__libc_init_array+0x2e>
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80002e8:	4798      	blx	r3
 80002ea:	3601      	adds	r6, #1
 80002ec:	e7ee      	b.n	80002cc <__libc_init_array+0xc>
 80002ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80002f2:	4798      	blx	r3
 80002f4:	3601      	adds	r6, #1
 80002f6:	e7f2      	b.n	80002de <__libc_init_array+0x1e>
 80002f8:	08000320 	.word	0x08000320
 80002fc:	08000320 	.word	0x08000320
 8000300:	08000320 	.word	0x08000320
 8000304:	08000324 	.word	0x08000324

08000308 <_init>:
 8000308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800030a:	bf00      	nop
 800030c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800030e:	bc08      	pop	{r3}
 8000310:	469e      	mov	lr, r3
 8000312:	4770      	bx	lr

08000314 <_fini>:
 8000314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000316:	bf00      	nop
 8000318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800031a:	bc08      	pop	{r3}
 800031c:	469e      	mov	lr, r3
 800031e:	4770      	bx	lr
