
5_uart_tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000234  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003cc  080003d4  000103d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003cc  080003cc  000103d4  2**0
                  CONTENTS
  4 .ARM          00000000  080003cc  080003cc  000103d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003cc  080003d4  000103d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003cc  080003cc  000103cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003d0  080003d0  000103d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003d4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003d4  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000103d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000004c9  00000000  00000000  00010404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000174  00000000  00000000  000108cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000068  00000000  00000000  00010a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000050  00000000  00000000  00010ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dc42  00000000  00000000  00010b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000005de  00000000  00000000  0001e742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004fae1  00000000  00000000  0001ed20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0006e801  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000ec  00000000  00000000  0006e854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080003b4 	.word	0x080003b4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080003b4 	.word	0x080003b4

080001d8 <main>:
void uart1_write(int ch);
static void uart_set_baundrate(USART_TypeDef *UARTx, uint32_t PeriphClk, uint32_t Baudrate);
static uint16_t compute_uart_div(uint32_t PeriphClk, uint32_t Baudrate);

int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0

	uart1_tx_init();
 80001de:	f000 f811 	bl	8000204 <uart1_tx_init>
	while (1)
	{

		uart1_write('I');
 80001e2:	2049      	movs	r0, #73	; 0x49
 80001e4:	f000 f85a 	bl	800029c <uart1_write>
		for (int i=0; i<100000; i++);
 80001e8:	2300      	movs	r3, #0
 80001ea:	607b      	str	r3, [r7, #4]
 80001ec:	e002      	b.n	80001f4 <main+0x1c>
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	3301      	adds	r3, #1
 80001f2:	607b      	str	r3, [r7, #4]
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	4a02      	ldr	r2, [pc, #8]	; (8000200 <main+0x28>)
 80001f8:	4293      	cmp	r3, r2
 80001fa:	ddf8      	ble.n	80001ee <main+0x16>
		uart1_write('I');
 80001fc:	e7f1      	b.n	80001e2 <main+0xa>
 80001fe:	bf00      	nop
 8000200:	0001869f 	.word	0x0001869f

08000204 <uart1_tx_init>:

	}
}

void uart1_tx_init(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	/******************Config uart gpio pin**************
	*Enable clock access to gpioa
	*Set PA9 mode to AF mode
	*Set PA9 AF type to UART_TX (AF07)*/

	RCC->AHB1ENR |= GPIOAEN;
 8000208:	4b20      	ldr	r3, [pc, #128]	; (800028c <uart1_tx_init+0x88>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800020c:	4a1f      	ldr	r2, [pc, #124]	; (800028c <uart1_tx_init+0x88>)
 800020e:	f043 0301 	orr.w	r3, r3, #1
 8000212:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA ->MODER &=~ (1U<<18);
 8000214:	4b1e      	ldr	r3, [pc, #120]	; (8000290 <uart1_tx_init+0x8c>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a1d      	ldr	r2, [pc, #116]	; (8000290 <uart1_tx_init+0x8c>)
 800021a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800021e:	6013      	str	r3, [r2, #0]
	GPIOA ->MODER |= (1U<<19);
 8000220:	4b1b      	ldr	r3, [pc, #108]	; (8000290 <uart1_tx_init+0x8c>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a1a      	ldr	r2, [pc, #104]	; (8000290 <uart1_tx_init+0x8c>)
 8000226:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800022a:	6013      	str	r3, [r2, #0]
	//MODER9->10
	//ALTERNATE FUNCTION REG (HIGH/LOW)
	GPIOA ->AFR[1] |= (1U<<4);
 800022c:	4b18      	ldr	r3, [pc, #96]	; (8000290 <uart1_tx_init+0x8c>)
 800022e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000230:	4a17      	ldr	r2, [pc, #92]	; (8000290 <uart1_tx_init+0x8c>)
 8000232:	f043 0310 	orr.w	r3, r3, #16
 8000236:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA ->AFR[1] |= (1U<<5);
 8000238:	4b15      	ldr	r3, [pc, #84]	; (8000290 <uart1_tx_init+0x8c>)
 800023a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800023c:	4a14      	ldr	r2, [pc, #80]	; (8000290 <uart1_tx_init+0x8c>)
 800023e:	f043 0320 	orr.w	r3, r3, #32
 8000242:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA ->AFR[1] |= (1U<<6);
 8000244:	4b12      	ldr	r3, [pc, #72]	; (8000290 <uart1_tx_init+0x8c>)
 8000246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000248:	4a11      	ldr	r2, [pc, #68]	; (8000290 <uart1_tx_init+0x8c>)
 800024a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800024e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA ->AFR[1] &=~ (1U<<7);
 8000250:	4b0f      	ldr	r3, [pc, #60]	; (8000290 <uart1_tx_init+0x8c>)
 8000252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000254:	4a0e      	ldr	r2, [pc, #56]	; (8000290 <uart1_tx_init+0x8c>)
 8000256:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800025a:	6253      	str	r3, [r2, #36]	; 0x24
	//AF7
	RCC->APB2ENR |= UART1EN; //enable uart1
 800025c:	4b0b      	ldr	r3, [pc, #44]	; (800028c <uart1_tx_init+0x88>)
 800025e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000260:	4a0a      	ldr	r2, [pc, #40]	; (800028c <uart1_tx_init+0x88>)
 8000262:	f043 0310 	orr.w	r3, r3, #16
 8000266:	6453      	str	r3, [r2, #68]	; 0x44
	uart_set_baundrate(USART1, APB2_CLK, UART_BAUDRATE); //config baudrate
 8000268:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800026c:	4909      	ldr	r1, [pc, #36]	; (8000294 <uart1_tx_init+0x90>)
 800026e:	480a      	ldr	r0, [pc, #40]	; (8000298 <uart1_tx_init+0x94>)
 8000270:	f000 f82c 	bl	80002cc <uart_set_baundrate>
	USART1->CR1 = CR1_TE; //config transfer direction
 8000274:	4b08      	ldr	r3, [pc, #32]	; (8000298 <uart1_tx_init+0x94>)
 8000276:	2208      	movs	r2, #8
 8000278:	60da      	str	r2, [r3, #12]
	USART1->CR1 |= CR1_UE;//Enable USART
 800027a:	4b07      	ldr	r3, [pc, #28]	; (8000298 <uart1_tx_init+0x94>)
 800027c:	68db      	ldr	r3, [r3, #12]
 800027e:	4a06      	ldr	r2, [pc, #24]	; (8000298 <uart1_tx_init+0x94>)
 8000280:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000284:	60d3      	str	r3, [r2, #12]


}
 8000286:	bf00      	nop
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	40023800 	.word	0x40023800
 8000290:	40020000 	.word	0x40020000
 8000294:	00f42400 	.word	0x00f42400
 8000298:	40011000 	.word	0x40011000

0800029c <uart1_write>:
void uart1_write(int ch)
{
 800029c:	b480      	push	{r7}
 800029e:	b083      	sub	sp, #12
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
	while (!(USART1->SR & SR_TXE));
 80002a4:	bf00      	nop
 80002a6:	4b08      	ldr	r3, [pc, #32]	; (80002c8 <uart1_write+0x2c>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d0f9      	beq.n	80002a6 <uart1_write+0xa>
	USART1 -> DR = (ch & 0xFF);  //DR: Data Register, write to transmit data reg
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	4a04      	ldr	r2, [pc, #16]	; (80002c8 <uart1_write+0x2c>)
 80002b6:	b2db      	uxtb	r3, r3
 80002b8:	6053      	str	r3, [r2, #4]

}
 80002ba:	bf00      	nop
 80002bc:	370c      	adds	r7, #12
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	40011000 	.word	0x40011000

080002cc <uart_set_baundrate>:
static void uart_set_baundrate(USART_TypeDef *UARTx, uint32_t PeriphClk, uint32_t Baudrate)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b084      	sub	sp, #16
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	60f8      	str	r0, [r7, #12]
 80002d4:	60b9      	str	r1, [r7, #8]
 80002d6:	607a      	str	r2, [r7, #4]
	//BAUD RATE REG
	UARTx->BRR = compute_uart_div(PeriphClk, Baudrate);
 80002d8:	6879      	ldr	r1, [r7, #4]
 80002da:	68b8      	ldr	r0, [r7, #8]
 80002dc:	f000 f808 	bl	80002f0 <compute_uart_div>
 80002e0:	4603      	mov	r3, r0
 80002e2:	461a      	mov	r2, r3
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	609a      	str	r2, [r3, #8]
}
 80002e8:	bf00      	nop
 80002ea:	3710      	adds	r7, #16
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}

080002f0 <compute_uart_div>:
static uint16_t compute_uart_div(uint32_t PeriphClk, uint32_t Baudrate)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
 80002f8:	6039      	str	r1, [r7, #0]
	return ((PeriphClk +(Baudrate/2U))/Baudrate);
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	085a      	lsrs	r2, r3, #1
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	441a      	add	r2, r3
 8000302:	683b      	ldr	r3, [r7, #0]
 8000304:	fbb2 f3f3 	udiv	r3, r2, r3
 8000308:	b29b      	uxth	r3, r3
}
 800030a:	4618      	mov	r0, r3
 800030c:	370c      	adds	r7, #12
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr
	...

08000318 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000318:	480d      	ldr	r0, [pc, #52]	; (8000350 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800031a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800031c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000320:	480c      	ldr	r0, [pc, #48]	; (8000354 <LoopForever+0x6>)
  ldr r1, =_edata
 8000322:	490d      	ldr	r1, [pc, #52]	; (8000358 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000324:	4a0d      	ldr	r2, [pc, #52]	; (800035c <LoopForever+0xe>)
  movs r3, #0
 8000326:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000328:	e002      	b.n	8000330 <LoopCopyDataInit>

0800032a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800032a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800032c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800032e:	3304      	adds	r3, #4

08000330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000334:	d3f9      	bcc.n	800032a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000336:	4a0a      	ldr	r2, [pc, #40]	; (8000360 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000338:	4c0a      	ldr	r4, [pc, #40]	; (8000364 <LoopForever+0x16>)
  movs r3, #0
 800033a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800033c:	e001      	b.n	8000342 <LoopFillZerobss>

0800033e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800033e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000340:	3204      	adds	r2, #4

08000342 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000344:	d3fb      	bcc.n	800033e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000346:	f000 f811 	bl	800036c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800034a:	f7ff ff45 	bl	80001d8 <main>

0800034e <LoopForever>:

LoopForever:
  b LoopForever
 800034e:	e7fe      	b.n	800034e <LoopForever>
  ldr   r0, =_estack
 8000350:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000354:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000358:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800035c:	080003d4 	.word	0x080003d4
  ldr r2, =_sbss
 8000360:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000364:	2000001c 	.word	0x2000001c

08000368 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000368:	e7fe      	b.n	8000368 <ADC_IRQHandler>
	...

0800036c <__libc_init_array>:
 800036c:	b570      	push	{r4, r5, r6, lr}
 800036e:	4d0d      	ldr	r5, [pc, #52]	; (80003a4 <__libc_init_array+0x38>)
 8000370:	4c0d      	ldr	r4, [pc, #52]	; (80003a8 <__libc_init_array+0x3c>)
 8000372:	1b64      	subs	r4, r4, r5
 8000374:	10a4      	asrs	r4, r4, #2
 8000376:	2600      	movs	r6, #0
 8000378:	42a6      	cmp	r6, r4
 800037a:	d109      	bne.n	8000390 <__libc_init_array+0x24>
 800037c:	4d0b      	ldr	r5, [pc, #44]	; (80003ac <__libc_init_array+0x40>)
 800037e:	4c0c      	ldr	r4, [pc, #48]	; (80003b0 <__libc_init_array+0x44>)
 8000380:	f000 f818 	bl	80003b4 <_init>
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	10a4      	asrs	r4, r4, #2
 8000388:	2600      	movs	r6, #0
 800038a:	42a6      	cmp	r6, r4
 800038c:	d105      	bne.n	800039a <__libc_init_array+0x2e>
 800038e:	bd70      	pop	{r4, r5, r6, pc}
 8000390:	f855 3b04 	ldr.w	r3, [r5], #4
 8000394:	4798      	blx	r3
 8000396:	3601      	adds	r6, #1
 8000398:	e7ee      	b.n	8000378 <__libc_init_array+0xc>
 800039a:	f855 3b04 	ldr.w	r3, [r5], #4
 800039e:	4798      	blx	r3
 80003a0:	3601      	adds	r6, #1
 80003a2:	e7f2      	b.n	800038a <__libc_init_array+0x1e>
 80003a4:	080003cc 	.word	0x080003cc
 80003a8:	080003cc 	.word	0x080003cc
 80003ac:	080003cc 	.word	0x080003cc
 80003b0:	080003d0 	.word	0x080003d0

080003b4 <_init>:
 80003b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003b6:	bf00      	nop
 80003b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ba:	bc08      	pop	{r3}
 80003bc:	469e      	mov	lr, r3
 80003be:	4770      	bx	lr

080003c0 <_fini>:
 80003c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003c2:	bf00      	nop
 80003c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003c6:	bc08      	pop	{r3}
 80003c8:	469e      	mov	lr, r3
 80003ca:	4770      	bx	lr
